// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nherson/psc/api/ent/fighter"
)

// Fighter is the model entity for the Fighter schema.
type Fighter struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FighterQuery when eager-loading is set.
	Edges        FighterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FighterEdges holds the relations/edges for other nodes in the graph.
type FighterEdges struct {
	// Fights holds the value of the fights edge.
	Fights []*Fight `json:"fights,omitempty"`
	// FighterAliases holds the value of the fighter_aliases edge.
	FighterAliases []*FighterAlias `json:"fighter_aliases,omitempty"`
	// FighterResults holds the value of the fighter_results edge.
	FighterResults []*FighterResults `json:"fighter_results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FightsOrErr returns the Fights value or an error if the edge
// was not loaded in eager-loading.
func (e FighterEdges) FightsOrErr() ([]*Fight, error) {
	if e.loadedTypes[0] {
		return e.Fights, nil
	}
	return nil, &NotLoadedError{edge: "fights"}
}

// FighterAliasesOrErr returns the FighterAliases value or an error if the edge
// was not loaded in eager-loading.
func (e FighterEdges) FighterAliasesOrErr() ([]*FighterAlias, error) {
	if e.loadedTypes[1] {
		return e.FighterAliases, nil
	}
	return nil, &NotLoadedError{edge: "fighter_aliases"}
}

// FighterResultsOrErr returns the FighterResults value or an error if the edge
// was not loaded in eager-loading.
func (e FighterEdges) FighterResultsOrErr() ([]*FighterResults, error) {
	if e.loadedTypes[2] {
		return e.FighterResults, nil
	}
	return nil, &NotLoadedError{edge: "fighter_results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fighter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fighter.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fighter fields.
func (f *Fighter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fighter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fighter.
// This includes values selected through modifiers, order, etc.
func (f *Fighter) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryFights queries the "fights" edge of the Fighter entity.
func (f *Fighter) QueryFights() *FightQuery {
	return NewFighterClient(f.config).QueryFights(f)
}

// QueryFighterAliases queries the "fighter_aliases" edge of the Fighter entity.
func (f *Fighter) QueryFighterAliases() *FighterAliasQuery {
	return NewFighterClient(f.config).QueryFighterAliases(f)
}

// QueryFighterResults queries the "fighter_results" edge of the Fighter entity.
func (f *Fighter) QueryFighterResults() *FighterResultsQuery {
	return NewFighterClient(f.config).QueryFighterResults(f)
}

// Update returns a builder for updating this Fighter.
// Note that you need to call Fighter.Unwrap() before calling this method if this Fighter
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fighter) Update() *FighterUpdateOne {
	return NewFighterClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fighter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fighter) Unwrap() *Fighter {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fighter is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fighter) String() string {
	var builder strings.Builder
	builder.WriteString("Fighter(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Fighters is a parsable slice of Fighter.
type Fighters []*Fighter
