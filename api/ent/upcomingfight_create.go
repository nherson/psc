// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/upcomingfight"
)

// UpcomingFightCreate is the builder for creating a UpcomingFight entity.
type UpcomingFightCreate struct {
	config
	mutation *UpcomingFightMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ufc *UpcomingFightCreate) SetCreatedAt(t time.Time) *UpcomingFightCreate {
	ufc.mutation.SetCreatedAt(t)
	return ufc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufc *UpcomingFightCreate) SetNillableCreatedAt(t *time.Time) *UpcomingFightCreate {
	if t != nil {
		ufc.SetCreatedAt(*t)
	}
	return ufc
}

// SetUpdatedAt sets the "updated_at" field.
func (ufc *UpcomingFightCreate) SetUpdatedAt(t time.Time) *UpcomingFightCreate {
	ufc.mutation.SetUpdatedAt(t)
	return ufc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ufc *UpcomingFightCreate) SetNillableUpdatedAt(t *time.Time) *UpcomingFightCreate {
	if t != nil {
		ufc.SetUpdatedAt(*t)
	}
	return ufc
}

// Mutation returns the UpcomingFightMutation object of the builder.
func (ufc *UpcomingFightCreate) Mutation() *UpcomingFightMutation {
	return ufc.mutation
}

// Save creates the UpcomingFight in the database.
func (ufc *UpcomingFightCreate) Save(ctx context.Context) (*UpcomingFight, error) {
	ufc.defaults()
	return withHooks[*UpcomingFight, UpcomingFightMutation](ctx, ufc.sqlSave, ufc.mutation, ufc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufc *UpcomingFightCreate) SaveX(ctx context.Context) *UpcomingFight {
	v, err := ufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufc *UpcomingFightCreate) Exec(ctx context.Context) error {
	_, err := ufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufc *UpcomingFightCreate) ExecX(ctx context.Context) {
	if err := ufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufc *UpcomingFightCreate) defaults() {
	if _, ok := ufc.mutation.CreatedAt(); !ok {
		v := upcomingfight.DefaultCreatedAt()
		ufc.mutation.SetCreatedAt(v)
	}
	if _, ok := ufc.mutation.UpdatedAt(); !ok {
		v := upcomingfight.DefaultUpdatedAt()
		ufc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufc *UpcomingFightCreate) check() error {
	if _, ok := ufc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UpcomingFight.created_at"`)}
	}
	if _, ok := ufc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UpcomingFight.updated_at"`)}
	}
	return nil
}

func (ufc *UpcomingFightCreate) sqlSave(ctx context.Context) (*UpcomingFight, error) {
	if err := ufc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ufc.mutation.id = &_node.ID
	ufc.mutation.done = true
	return _node, nil
}

func (ufc *UpcomingFightCreate) createSpec() (*UpcomingFight, *sqlgraph.CreateSpec) {
	var (
		_node = &UpcomingFight{config: ufc.config}
		_spec = sqlgraph.NewCreateSpec(upcomingfight.Table, sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ufc.conflict
	if value, ok := ufc.mutation.CreatedAt(); ok {
		_spec.SetField(upcomingfight.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ufc.mutation.UpdatedAt(); ok {
		_spec.SetField(upcomingfight.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpcomingFight.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpcomingFightUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ufc *UpcomingFightCreate) OnConflict(opts ...sql.ConflictOption) *UpcomingFightUpsertOne {
	ufc.conflict = opts
	return &UpcomingFightUpsertOne{
		create: ufc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpcomingFight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufc *UpcomingFightCreate) OnConflictColumns(columns ...string) *UpcomingFightUpsertOne {
	ufc.conflict = append(ufc.conflict, sql.ConflictColumns(columns...))
	return &UpcomingFightUpsertOne{
		create: ufc,
	}
}

type (
	// UpcomingFightUpsertOne is the builder for "upsert"-ing
	//  one UpcomingFight node.
	UpcomingFightUpsertOne struct {
		create *UpcomingFightCreate
	}

	// UpcomingFightUpsert is the "OnConflict" setter.
	UpcomingFightUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UpcomingFightUpsert) SetUpdatedAt(v time.Time) *UpcomingFightUpsert {
	u.Set(upcomingfight.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpcomingFightUpsert) UpdateUpdatedAt() *UpcomingFightUpsert {
	u.SetExcluded(upcomingfight.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UpcomingFight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpcomingFightUpsertOne) UpdateNewValues() *UpcomingFightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(upcomingfight.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpcomingFight.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpcomingFightUpsertOne) Ignore() *UpcomingFightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpcomingFightUpsertOne) DoNothing() *UpcomingFightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpcomingFightCreate.OnConflict
// documentation for more info.
func (u *UpcomingFightUpsertOne) Update(set func(*UpcomingFightUpsert)) *UpcomingFightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpcomingFightUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpcomingFightUpsertOne) SetUpdatedAt(v time.Time) *UpcomingFightUpsertOne {
	return u.Update(func(s *UpcomingFightUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpcomingFightUpsertOne) UpdateUpdatedAt() *UpcomingFightUpsertOne {
	return u.Update(func(s *UpcomingFightUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UpcomingFightUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpcomingFightCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpcomingFightUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpcomingFightUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpcomingFightUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpcomingFightCreateBulk is the builder for creating many UpcomingFight entities in bulk.
type UpcomingFightCreateBulk struct {
	config
	builders []*UpcomingFightCreate
	conflict []sql.ConflictOption
}

// Save creates the UpcomingFight entities in the database.
func (ufcb *UpcomingFightCreateBulk) Save(ctx context.Context) ([]*UpcomingFight, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ufcb.builders))
	nodes := make([]*UpcomingFight, len(ufcb.builders))
	mutators := make([]Mutator, len(ufcb.builders))
	for i := range ufcb.builders {
		func(i int, root context.Context) {
			builder := ufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpcomingFightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufcb *UpcomingFightCreateBulk) SaveX(ctx context.Context) []*UpcomingFight {
	v, err := ufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufcb *UpcomingFightCreateBulk) Exec(ctx context.Context) error {
	_, err := ufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufcb *UpcomingFightCreateBulk) ExecX(ctx context.Context) {
	if err := ufcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpcomingFight.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpcomingFightUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ufcb *UpcomingFightCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpcomingFightUpsertBulk {
	ufcb.conflict = opts
	return &UpcomingFightUpsertBulk{
		create: ufcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpcomingFight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufcb *UpcomingFightCreateBulk) OnConflictColumns(columns ...string) *UpcomingFightUpsertBulk {
	ufcb.conflict = append(ufcb.conflict, sql.ConflictColumns(columns...))
	return &UpcomingFightUpsertBulk{
		create: ufcb,
	}
}

// UpcomingFightUpsertBulk is the builder for "upsert"-ing
// a bulk of UpcomingFight nodes.
type UpcomingFightUpsertBulk struct {
	create *UpcomingFightCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UpcomingFight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpcomingFightUpsertBulk) UpdateNewValues() *UpcomingFightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(upcomingfight.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpcomingFight.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpcomingFightUpsertBulk) Ignore() *UpcomingFightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpcomingFightUpsertBulk) DoNothing() *UpcomingFightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpcomingFightCreateBulk.OnConflict
// documentation for more info.
func (u *UpcomingFightUpsertBulk) Update(set func(*UpcomingFightUpsert)) *UpcomingFightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpcomingFightUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpcomingFightUpsertBulk) SetUpdatedAt(v time.Time) *UpcomingFightUpsertBulk {
	return u.Update(func(s *UpcomingFightUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpcomingFightUpsertBulk) UpdateUpdatedAt() *UpcomingFightUpsertBulk {
	return u.Update(func(s *UpcomingFightUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UpcomingFightUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpcomingFightCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpcomingFightCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpcomingFightUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
