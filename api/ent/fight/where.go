// Code generated by ent, DO NOT EDIT.

package fight

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nherson/psc/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldID, id))
}

// UfcFightID applies equality check predicate on the "ufc_fight_id" field. It's identical to UfcFightIDEQ.
func UfcFightID(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldUfcFightID, v))
}

// CardOrder applies equality check predicate on the "card_order" field. It's identical to CardOrderEQ.
func CardOrder(v int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldCardOrder, v))
}

// CardSegment applies equality check predicate on the "card_segment" field. It's identical to CardSegmentEQ.
func CardSegment(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldCardSegment, v))
}

// ResultMethod applies equality check predicate on the "result_method" field. It's identical to ResultMethodEQ.
func ResultMethod(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldResultMethod, v))
}

// ResultEndingRound applies equality check predicate on the "result_ending_round" field. It's identical to ResultEndingRoundEQ.
func ResultEndingRound(v int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldResultEndingRound, v))
}

// ResultEndingTimeSeconds applies equality check predicate on the "result_ending_time_seconds" field. It's identical to ResultEndingTimeSecondsEQ.
func ResultEndingTimeSeconds(v int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldResultEndingTimeSeconds, v))
}

// UfcFightIDEQ applies the EQ predicate on the "ufc_fight_id" field.
func UfcFightIDEQ(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldUfcFightID, v))
}

// UfcFightIDNEQ applies the NEQ predicate on the "ufc_fight_id" field.
func UfcFightIDNEQ(v string) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldUfcFightID, v))
}

// UfcFightIDIn applies the In predicate on the "ufc_fight_id" field.
func UfcFightIDIn(vs ...string) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldUfcFightID, vs...))
}

// UfcFightIDNotIn applies the NotIn predicate on the "ufc_fight_id" field.
func UfcFightIDNotIn(vs ...string) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldUfcFightID, vs...))
}

// UfcFightIDGT applies the GT predicate on the "ufc_fight_id" field.
func UfcFightIDGT(v string) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldUfcFightID, v))
}

// UfcFightIDGTE applies the GTE predicate on the "ufc_fight_id" field.
func UfcFightIDGTE(v string) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldUfcFightID, v))
}

// UfcFightIDLT applies the LT predicate on the "ufc_fight_id" field.
func UfcFightIDLT(v string) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldUfcFightID, v))
}

// UfcFightIDLTE applies the LTE predicate on the "ufc_fight_id" field.
func UfcFightIDLTE(v string) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldUfcFightID, v))
}

// UfcFightIDContains applies the Contains predicate on the "ufc_fight_id" field.
func UfcFightIDContains(v string) predicate.Fight {
	return predicate.Fight(sql.FieldContains(FieldUfcFightID, v))
}

// UfcFightIDHasPrefix applies the HasPrefix predicate on the "ufc_fight_id" field.
func UfcFightIDHasPrefix(v string) predicate.Fight {
	return predicate.Fight(sql.FieldHasPrefix(FieldUfcFightID, v))
}

// UfcFightIDHasSuffix applies the HasSuffix predicate on the "ufc_fight_id" field.
func UfcFightIDHasSuffix(v string) predicate.Fight {
	return predicate.Fight(sql.FieldHasSuffix(FieldUfcFightID, v))
}

// UfcFightIDEqualFold applies the EqualFold predicate on the "ufc_fight_id" field.
func UfcFightIDEqualFold(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEqualFold(FieldUfcFightID, v))
}

// UfcFightIDContainsFold applies the ContainsFold predicate on the "ufc_fight_id" field.
func UfcFightIDContainsFold(v string) predicate.Fight {
	return predicate.Fight(sql.FieldContainsFold(FieldUfcFightID, v))
}

// CardOrderEQ applies the EQ predicate on the "card_order" field.
func CardOrderEQ(v int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldCardOrder, v))
}

// CardOrderNEQ applies the NEQ predicate on the "card_order" field.
func CardOrderNEQ(v int) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldCardOrder, v))
}

// CardOrderIn applies the In predicate on the "card_order" field.
func CardOrderIn(vs ...int) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldCardOrder, vs...))
}

// CardOrderNotIn applies the NotIn predicate on the "card_order" field.
func CardOrderNotIn(vs ...int) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldCardOrder, vs...))
}

// CardOrderGT applies the GT predicate on the "card_order" field.
func CardOrderGT(v int) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldCardOrder, v))
}

// CardOrderGTE applies the GTE predicate on the "card_order" field.
func CardOrderGTE(v int) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldCardOrder, v))
}

// CardOrderLT applies the LT predicate on the "card_order" field.
func CardOrderLT(v int) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldCardOrder, v))
}

// CardOrderLTE applies the LTE predicate on the "card_order" field.
func CardOrderLTE(v int) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldCardOrder, v))
}

// CardSegmentEQ applies the EQ predicate on the "card_segment" field.
func CardSegmentEQ(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldCardSegment, v))
}

// CardSegmentNEQ applies the NEQ predicate on the "card_segment" field.
func CardSegmentNEQ(v string) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldCardSegment, v))
}

// CardSegmentIn applies the In predicate on the "card_segment" field.
func CardSegmentIn(vs ...string) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldCardSegment, vs...))
}

// CardSegmentNotIn applies the NotIn predicate on the "card_segment" field.
func CardSegmentNotIn(vs ...string) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldCardSegment, vs...))
}

// CardSegmentGT applies the GT predicate on the "card_segment" field.
func CardSegmentGT(v string) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldCardSegment, v))
}

// CardSegmentGTE applies the GTE predicate on the "card_segment" field.
func CardSegmentGTE(v string) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldCardSegment, v))
}

// CardSegmentLT applies the LT predicate on the "card_segment" field.
func CardSegmentLT(v string) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldCardSegment, v))
}

// CardSegmentLTE applies the LTE predicate on the "card_segment" field.
func CardSegmentLTE(v string) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldCardSegment, v))
}

// CardSegmentContains applies the Contains predicate on the "card_segment" field.
func CardSegmentContains(v string) predicate.Fight {
	return predicate.Fight(sql.FieldContains(FieldCardSegment, v))
}

// CardSegmentHasPrefix applies the HasPrefix predicate on the "card_segment" field.
func CardSegmentHasPrefix(v string) predicate.Fight {
	return predicate.Fight(sql.FieldHasPrefix(FieldCardSegment, v))
}

// CardSegmentHasSuffix applies the HasSuffix predicate on the "card_segment" field.
func CardSegmentHasSuffix(v string) predicate.Fight {
	return predicate.Fight(sql.FieldHasSuffix(FieldCardSegment, v))
}

// CardSegmentEqualFold applies the EqualFold predicate on the "card_segment" field.
func CardSegmentEqualFold(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEqualFold(FieldCardSegment, v))
}

// CardSegmentContainsFold applies the ContainsFold predicate on the "card_segment" field.
func CardSegmentContainsFold(v string) predicate.Fight {
	return predicate.Fight(sql.FieldContainsFold(FieldCardSegment, v))
}

// ResultMethodEQ applies the EQ predicate on the "result_method" field.
func ResultMethodEQ(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldResultMethod, v))
}

// ResultMethodNEQ applies the NEQ predicate on the "result_method" field.
func ResultMethodNEQ(v string) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldResultMethod, v))
}

// ResultMethodIn applies the In predicate on the "result_method" field.
func ResultMethodIn(vs ...string) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldResultMethod, vs...))
}

// ResultMethodNotIn applies the NotIn predicate on the "result_method" field.
func ResultMethodNotIn(vs ...string) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldResultMethod, vs...))
}

// ResultMethodGT applies the GT predicate on the "result_method" field.
func ResultMethodGT(v string) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldResultMethod, v))
}

// ResultMethodGTE applies the GTE predicate on the "result_method" field.
func ResultMethodGTE(v string) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldResultMethod, v))
}

// ResultMethodLT applies the LT predicate on the "result_method" field.
func ResultMethodLT(v string) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldResultMethod, v))
}

// ResultMethodLTE applies the LTE predicate on the "result_method" field.
func ResultMethodLTE(v string) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldResultMethod, v))
}

// ResultMethodContains applies the Contains predicate on the "result_method" field.
func ResultMethodContains(v string) predicate.Fight {
	return predicate.Fight(sql.FieldContains(FieldResultMethod, v))
}

// ResultMethodHasPrefix applies the HasPrefix predicate on the "result_method" field.
func ResultMethodHasPrefix(v string) predicate.Fight {
	return predicate.Fight(sql.FieldHasPrefix(FieldResultMethod, v))
}

// ResultMethodHasSuffix applies the HasSuffix predicate on the "result_method" field.
func ResultMethodHasSuffix(v string) predicate.Fight {
	return predicate.Fight(sql.FieldHasSuffix(FieldResultMethod, v))
}

// ResultMethodEqualFold applies the EqualFold predicate on the "result_method" field.
func ResultMethodEqualFold(v string) predicate.Fight {
	return predicate.Fight(sql.FieldEqualFold(FieldResultMethod, v))
}

// ResultMethodContainsFold applies the ContainsFold predicate on the "result_method" field.
func ResultMethodContainsFold(v string) predicate.Fight {
	return predicate.Fight(sql.FieldContainsFold(FieldResultMethod, v))
}

// ResultEndingRoundEQ applies the EQ predicate on the "result_ending_round" field.
func ResultEndingRoundEQ(v int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldResultEndingRound, v))
}

// ResultEndingRoundNEQ applies the NEQ predicate on the "result_ending_round" field.
func ResultEndingRoundNEQ(v int) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldResultEndingRound, v))
}

// ResultEndingRoundIn applies the In predicate on the "result_ending_round" field.
func ResultEndingRoundIn(vs ...int) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldResultEndingRound, vs...))
}

// ResultEndingRoundNotIn applies the NotIn predicate on the "result_ending_round" field.
func ResultEndingRoundNotIn(vs ...int) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldResultEndingRound, vs...))
}

// ResultEndingRoundGT applies the GT predicate on the "result_ending_round" field.
func ResultEndingRoundGT(v int) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldResultEndingRound, v))
}

// ResultEndingRoundGTE applies the GTE predicate on the "result_ending_round" field.
func ResultEndingRoundGTE(v int) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldResultEndingRound, v))
}

// ResultEndingRoundLT applies the LT predicate on the "result_ending_round" field.
func ResultEndingRoundLT(v int) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldResultEndingRound, v))
}

// ResultEndingRoundLTE applies the LTE predicate on the "result_ending_round" field.
func ResultEndingRoundLTE(v int) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldResultEndingRound, v))
}

// ResultEndingTimeSecondsEQ applies the EQ predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsEQ(v int) predicate.Fight {
	return predicate.Fight(sql.FieldEQ(FieldResultEndingTimeSeconds, v))
}

// ResultEndingTimeSecondsNEQ applies the NEQ predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsNEQ(v int) predicate.Fight {
	return predicate.Fight(sql.FieldNEQ(FieldResultEndingTimeSeconds, v))
}

// ResultEndingTimeSecondsIn applies the In predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsIn(vs ...int) predicate.Fight {
	return predicate.Fight(sql.FieldIn(FieldResultEndingTimeSeconds, vs...))
}

// ResultEndingTimeSecondsNotIn applies the NotIn predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsNotIn(vs ...int) predicate.Fight {
	return predicate.Fight(sql.FieldNotIn(FieldResultEndingTimeSeconds, vs...))
}

// ResultEndingTimeSecondsGT applies the GT predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsGT(v int) predicate.Fight {
	return predicate.Fight(sql.FieldGT(FieldResultEndingTimeSeconds, v))
}

// ResultEndingTimeSecondsGTE applies the GTE predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsGTE(v int) predicate.Fight {
	return predicate.Fight(sql.FieldGTE(FieldResultEndingTimeSeconds, v))
}

// ResultEndingTimeSecondsLT applies the LT predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsLT(v int) predicate.Fight {
	return predicate.Fight(sql.FieldLT(FieldResultEndingTimeSeconds, v))
}

// ResultEndingTimeSecondsLTE applies the LTE predicate on the "result_ending_time_seconds" field.
func ResultEndingTimeSecondsLTE(v int) predicate.Fight {
	return predicate.Fight(sql.FieldLTE(FieldResultEndingTimeSeconds, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFighters applies the HasEdge predicate on the "fighters" edge.
func HasFighters() predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FightersTable, FightersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFightersWith applies the HasEdge predicate on the "fighters" edge with a given conditions (other predicates).
func HasFightersWith(preds ...predicate.Fighter) predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		step := newFightersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFighterResults applies the HasEdge predicate on the "fighter_results" edge.
func HasFighterResults() predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FighterResultsTable, FighterResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFighterResultsWith applies the HasEdge predicate on the "fighter_results" edge with a given conditions (other predicates).
func HasFighterResultsWith(preds ...predicate.FighterResults) predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		step := newFighterResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fight) predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fight) predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fight) predicate.Fight {
	return predicate.Fight(func(s *sql.Selector) {
		p(s.Not())
	})
}
