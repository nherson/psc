// Code generated by ent, DO NOT EDIT.

package fight

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fight type in the database.
	Label = "fight"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUfcFightID holds the string denoting the ufc_fight_id field in the database.
	FieldUfcFightID = "ufc_fight_id"
	// FieldCardOrder holds the string denoting the card_order field in the database.
	FieldCardOrder = "card_order"
	// FieldCardSegment holds the string denoting the card_segment field in the database.
	FieldCardSegment = "card_segment"
	// FieldResultMethod holds the string denoting the result_method field in the database.
	FieldResultMethod = "result_method"
	// FieldResultEndingRound holds the string denoting the result_ending_round field in the database.
	FieldResultEndingRound = "result_ending_round"
	// FieldResultEndingTimeSeconds holds the string denoting the result_ending_time_seconds field in the database.
	FieldResultEndingTimeSeconds = "result_ending_time_seconds"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeFighters holds the string denoting the fighters edge name in mutations.
	EdgeFighters = "fighters"
	// EdgeFighterResults holds the string denoting the fighter_results edge name in mutations.
	EdgeFighterResults = "fighter_results"
	// Table holds the table name of the fight in the database.
	Table = "fights"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "fights"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_fights"
	// FightersTable is the table that holds the fighters relation/edge. The primary key declared below.
	FightersTable = "fighter_results"
	// FightersInverseTable is the table name for the Fighter entity.
	// It exists in this package in order to avoid circular dependency with the "fighter" package.
	FightersInverseTable = "fighters"
	// FighterResultsTable is the table that holds the fighter_results relation/edge.
	FighterResultsTable = "fighter_results"
	// FighterResultsInverseTable is the table name for the FighterResults entity.
	// It exists in this package in order to avoid circular dependency with the "fighterresults" package.
	FighterResultsInverseTable = "fighter_results"
	// FighterResultsColumn is the table column denoting the fighter_results relation/edge.
	FighterResultsColumn = "fight_id"
)

// Columns holds all SQL columns for fight fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUfcFightID,
	FieldCardOrder,
	FieldCardSegment,
	FieldResultMethod,
	FieldResultEndingRound,
	FieldResultEndingTimeSeconds,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "fights"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_fights",
}

var (
	// FightersPrimaryKey and FightersColumn2 are the table columns denoting the
	// primary key for the fighters relation (M2M).
	FightersPrimaryKey = []string{"fight_id", "fighter_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UfcFightIDValidator is a validator for the "ufc_fight_id" field. It is called by the builders before save.
	UfcFightIDValidator func(string) error
	// CardOrderValidator is a validator for the "card_order" field. It is called by the builders before save.
	CardOrderValidator func(int) error
	// CardSegmentValidator is a validator for the "card_segment" field. It is called by the builders before save.
	CardSegmentValidator func(string) error
	// ResultMethodValidator is a validator for the "result_method" field. It is called by the builders before save.
	ResultMethodValidator func(string) error
)

// Order defines the ordering method for the Fight queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUfcFightID orders the results by the ufc_fight_id field.
func ByUfcFightID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUfcFightID, opts...).ToFunc()
}

// ByCardOrder orders the results by the card_order field.
func ByCardOrder(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCardOrder, opts...).ToFunc()
}

// ByCardSegment orders the results by the card_segment field.
func ByCardSegment(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCardSegment, opts...).ToFunc()
}

// ByResultMethod orders the results by the result_method field.
func ByResultMethod(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldResultMethod, opts...).ToFunc()
}

// ByResultEndingRound orders the results by the result_ending_round field.
func ByResultEndingRound(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldResultEndingRound, opts...).ToFunc()
}

// ByResultEndingTimeSeconds orders the results by the result_ending_time_seconds field.
func ByResultEndingTimeSeconds(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldResultEndingTimeSeconds, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByFightersCount orders the results by fighters count.
func ByFightersCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFightersStep(), opts...)
	}
}

// ByFighters orders the results by fighters terms.
func ByFighters(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFightersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFighterResultsCount orders the results by fighter_results count.
func ByFighterResultsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFighterResultsStep(), opts...)
	}
}

// ByFighterResults orders the results by fighter_results terms.
func ByFighterResults(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFighterResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
func newFightersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FightersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FightersTable, FightersPrimaryKey...),
	)
}
func newFighterResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FighterResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FighterResultsTable, FighterResultsColumn),
	)
}
