// Code generated by ent, DO NOT EDIT.

package event

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUfcEventID holds the string denoting the ufc_event_id field in the database.
	FieldUfcEventID = "ufc_event_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeFights holds the string denoting the fights edge name in mutations.
	EdgeFights = "fights"
	// Table holds the table name of the event in the database.
	Table = "events"
	// FightsTable is the table that holds the fights relation/edge.
	FightsTable = "fights"
	// FightsInverseTable is the table name for the Fight entity.
	// It exists in this package in order to avoid circular dependency with the "fight" package.
	FightsInverseTable = "fights"
	// FightsColumn is the table column denoting the fights relation/edge.
	FightsColumn = "event_fights"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldUfcEventID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UfcEventIDValidator is a validator for the "ufc_event_id" field. It is called by the builders before save.
	UfcEventIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Order defines the ordering method for the Event queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUfcEventID orders the results by the ufc_event_id field.
func ByUfcEventID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUfcEventID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFightsCount orders the results by fights count.
func ByFightsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFightsStep(), opts...)
	}
}

// ByFights orders the results by fights terms.
func ByFights(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFightsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFightsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FightsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FightsTable, FightsColumn),
	)
}
