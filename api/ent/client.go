// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/nherson/psc/api/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nherson/psc/api/ent/event"
	"github.com/nherson/psc/api/ent/fight"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighteralias"
	"github.com/nherson/psc/api/ent/fighterresults"
	"github.com/nherson/psc/api/ent/upcomingevent"
	"github.com/nherson/psc/api/ent/upcomingfight"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// Fight is the client for interacting with the Fight builders.
	Fight *FightClient
	// Fighter is the client for interacting with the Fighter builders.
	Fighter *FighterClient
	// FighterAlias is the client for interacting with the FighterAlias builders.
	FighterAlias *FighterAliasClient
	// FighterResults is the client for interacting with the FighterResults builders.
	FighterResults *FighterResultsClient
	// UpcomingEvent is the client for interacting with the UpcomingEvent builders.
	UpcomingEvent *UpcomingEventClient
	// UpcomingFight is the client for interacting with the UpcomingFight builders.
	UpcomingFight *UpcomingFightClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Event = NewEventClient(c.config)
	c.Fight = NewFightClient(c.config)
	c.Fighter = NewFighterClient(c.config)
	c.FighterAlias = NewFighterAliasClient(c.config)
	c.FighterResults = NewFighterResultsClient(c.config)
	c.UpcomingEvent = NewUpcomingEventClient(c.config)
	c.UpcomingFight = NewUpcomingFightClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Event:          NewEventClient(cfg),
		Fight:          NewFightClient(cfg),
		Fighter:        NewFighterClient(cfg),
		FighterAlias:   NewFighterAliasClient(cfg),
		FighterResults: NewFighterResultsClient(cfg),
		UpcomingEvent:  NewUpcomingEventClient(cfg),
		UpcomingFight:  NewUpcomingFightClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Event:          NewEventClient(cfg),
		Fight:          NewFightClient(cfg),
		Fighter:        NewFighterClient(cfg),
		FighterAlias:   NewFighterAliasClient(cfg),
		FighterResults: NewFighterResultsClient(cfg),
		UpcomingEvent:  NewUpcomingEventClient(cfg),
		UpcomingFight:  NewUpcomingFightClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Event.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Event, c.Fight, c.Fighter, c.FighterAlias, c.FighterResults, c.UpcomingEvent,
		c.UpcomingFight,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Event, c.Fight, c.Fighter, c.FighterAlias, c.FighterResults, c.UpcomingEvent,
		c.UpcomingFight,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EventMutation:
		return c.Event.mutate(ctx, m)
	case *FightMutation:
		return c.Fight.mutate(ctx, m)
	case *FighterMutation:
		return c.Fighter.mutate(ctx, m)
	case *FighterAliasMutation:
		return c.FighterAlias.mutate(ctx, m)
	case *FighterResultsMutation:
		return c.FighterResults.mutate(ctx, m)
	case *UpcomingEventMutation:
		return c.UpcomingEvent.mutate(ctx, m)
	case *UpcomingFightMutation:
		return c.UpcomingFight.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `event.Intercept(f(g(h())))`.
func (c *EventClient) Intercept(interceptors ...Interceptor) {
	c.inters.Event = append(c.inters.Event, interceptors...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id int) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id int) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id int) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id int) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFights queries the fights edge of a Event.
func (c *EventClient) QueryFights(e *Event) *FightQuery {
	query := (&FightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(fight.Table, fight.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, event.FightsTable, event.FightsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// Interceptors returns the client interceptors.
func (c *EventClient) Interceptors() []Interceptor {
	return c.inters.Event
}

func (c *EventClient) mutate(ctx context.Context, m *EventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Event mutation op: %q", m.Op())
	}
}

// FightClient is a client for the Fight schema.
type FightClient struct {
	config
}

// NewFightClient returns a client for the Fight from the given config.
func NewFightClient(c config) *FightClient {
	return &FightClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fight.Hooks(f(g(h())))`.
func (c *FightClient) Use(hooks ...Hook) {
	c.hooks.Fight = append(c.hooks.Fight, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fight.Intercept(f(g(h())))`.
func (c *FightClient) Intercept(interceptors ...Interceptor) {
	c.inters.Fight = append(c.inters.Fight, interceptors...)
}

// Create returns a builder for creating a Fight entity.
func (c *FightClient) Create() *FightCreate {
	mutation := newFightMutation(c.config, OpCreate)
	return &FightCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fight entities.
func (c *FightClient) CreateBulk(builders ...*FightCreate) *FightCreateBulk {
	return &FightCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fight.
func (c *FightClient) Update() *FightUpdate {
	mutation := newFightMutation(c.config, OpUpdate)
	return &FightUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FightClient) UpdateOne(f *Fight) *FightUpdateOne {
	mutation := newFightMutation(c.config, OpUpdateOne, withFight(f))
	return &FightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FightClient) UpdateOneID(id int) *FightUpdateOne {
	mutation := newFightMutation(c.config, OpUpdateOne, withFightID(id))
	return &FightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fight.
func (c *FightClient) Delete() *FightDelete {
	mutation := newFightMutation(c.config, OpDelete)
	return &FightDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FightClient) DeleteOne(f *Fight) *FightDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FightClient) DeleteOneID(id int) *FightDeleteOne {
	builder := c.Delete().Where(fight.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FightDeleteOne{builder}
}

// Query returns a query builder for Fight.
func (c *FightClient) Query() *FightQuery {
	return &FightQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFight},
		inters: c.Interceptors(),
	}
}

// Get returns a Fight entity by its id.
func (c *FightClient) Get(ctx context.Context, id int) (*Fight, error) {
	return c.Query().Where(fight.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FightClient) GetX(ctx context.Context, id int) *Fight {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a Fight.
func (c *FightClient) QueryEvent(f *Fight) *EventQuery {
	query := (&EventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fight.Table, fight.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fight.EventTable, fight.EventColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFighters queries the fighters edge of a Fight.
func (c *FightClient) QueryFighters(f *Fight) *FighterQuery {
	query := (&FighterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fight.Table, fight.FieldID, id),
			sqlgraph.To(fighter.Table, fighter.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, fight.FightersTable, fight.FightersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFighterResults queries the fighter_results edge of a Fight.
func (c *FightClient) QueryFighterResults(f *Fight) *FighterResultsQuery {
	query := (&FighterResultsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fight.Table, fight.FieldID, id),
			sqlgraph.To(fighterresults.Table, fighterresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, fight.FighterResultsTable, fight.FighterResultsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FightClient) Hooks() []Hook {
	return c.hooks.Fight
}

// Interceptors returns the client interceptors.
func (c *FightClient) Interceptors() []Interceptor {
	return c.inters.Fight
}

func (c *FightClient) mutate(ctx context.Context, m *FightMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FightCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FightUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FightDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Fight mutation op: %q", m.Op())
	}
}

// FighterClient is a client for the Fighter schema.
type FighterClient struct {
	config
}

// NewFighterClient returns a client for the Fighter from the given config.
func NewFighterClient(c config) *FighterClient {
	return &FighterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fighter.Hooks(f(g(h())))`.
func (c *FighterClient) Use(hooks ...Hook) {
	c.hooks.Fighter = append(c.hooks.Fighter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fighter.Intercept(f(g(h())))`.
func (c *FighterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Fighter = append(c.inters.Fighter, interceptors...)
}

// Create returns a builder for creating a Fighter entity.
func (c *FighterClient) Create() *FighterCreate {
	mutation := newFighterMutation(c.config, OpCreate)
	return &FighterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fighter entities.
func (c *FighterClient) CreateBulk(builders ...*FighterCreate) *FighterCreateBulk {
	return &FighterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fighter.
func (c *FighterClient) Update() *FighterUpdate {
	mutation := newFighterMutation(c.config, OpUpdate)
	return &FighterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FighterClient) UpdateOne(f *Fighter) *FighterUpdateOne {
	mutation := newFighterMutation(c.config, OpUpdateOne, withFighter(f))
	return &FighterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FighterClient) UpdateOneID(id int) *FighterUpdateOne {
	mutation := newFighterMutation(c.config, OpUpdateOne, withFighterID(id))
	return &FighterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fighter.
func (c *FighterClient) Delete() *FighterDelete {
	mutation := newFighterMutation(c.config, OpDelete)
	return &FighterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FighterClient) DeleteOne(f *Fighter) *FighterDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FighterClient) DeleteOneID(id int) *FighterDeleteOne {
	builder := c.Delete().Where(fighter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FighterDeleteOne{builder}
}

// Query returns a query builder for Fighter.
func (c *FighterClient) Query() *FighterQuery {
	return &FighterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFighter},
		inters: c.Interceptors(),
	}
}

// Get returns a Fighter entity by its id.
func (c *FighterClient) Get(ctx context.Context, id int) (*Fighter, error) {
	return c.Query().Where(fighter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FighterClient) GetX(ctx context.Context, id int) *Fighter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFights queries the fights edge of a Fighter.
func (c *FighterClient) QueryFights(f *Fighter) *FightQuery {
	query := (&FightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fighter.Table, fighter.FieldID, id),
			sqlgraph.To(fight.Table, fight.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, fighter.FightsTable, fighter.FightsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFighterAliases queries the fighter_aliases edge of a Fighter.
func (c *FighterClient) QueryFighterAliases(f *Fighter) *FighterAliasQuery {
	query := (&FighterAliasClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fighter.Table, fighter.FieldID, id),
			sqlgraph.To(fighteralias.Table, fighteralias.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fighter.FighterAliasesTable, fighter.FighterAliasesColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFighterResults queries the fighter_results edge of a Fighter.
func (c *FighterClient) QueryFighterResults(f *Fighter) *FighterResultsQuery {
	query := (&FighterResultsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fighter.Table, fighter.FieldID, id),
			sqlgraph.To(fighterresults.Table, fighterresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, fighter.FighterResultsTable, fighter.FighterResultsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FighterClient) Hooks() []Hook {
	return c.hooks.Fighter
}

// Interceptors returns the client interceptors.
func (c *FighterClient) Interceptors() []Interceptor {
	return c.inters.Fighter
}

func (c *FighterClient) mutate(ctx context.Context, m *FighterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FighterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FighterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FighterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FighterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Fighter mutation op: %q", m.Op())
	}
}

// FighterAliasClient is a client for the FighterAlias schema.
type FighterAliasClient struct {
	config
}

// NewFighterAliasClient returns a client for the FighterAlias from the given config.
func NewFighterAliasClient(c config) *FighterAliasClient {
	return &FighterAliasClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fighteralias.Hooks(f(g(h())))`.
func (c *FighterAliasClient) Use(hooks ...Hook) {
	c.hooks.FighterAlias = append(c.hooks.FighterAlias, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fighteralias.Intercept(f(g(h())))`.
func (c *FighterAliasClient) Intercept(interceptors ...Interceptor) {
	c.inters.FighterAlias = append(c.inters.FighterAlias, interceptors...)
}

// Create returns a builder for creating a FighterAlias entity.
func (c *FighterAliasClient) Create() *FighterAliasCreate {
	mutation := newFighterAliasMutation(c.config, OpCreate)
	return &FighterAliasCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FighterAlias entities.
func (c *FighterAliasClient) CreateBulk(builders ...*FighterAliasCreate) *FighterAliasCreateBulk {
	return &FighterAliasCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FighterAlias.
func (c *FighterAliasClient) Update() *FighterAliasUpdate {
	mutation := newFighterAliasMutation(c.config, OpUpdate)
	return &FighterAliasUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FighterAliasClient) UpdateOne(fa *FighterAlias) *FighterAliasUpdateOne {
	mutation := newFighterAliasMutation(c.config, OpUpdateOne, withFighterAlias(fa))
	return &FighterAliasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FighterAliasClient) UpdateOneID(id int) *FighterAliasUpdateOne {
	mutation := newFighterAliasMutation(c.config, OpUpdateOne, withFighterAliasID(id))
	return &FighterAliasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FighterAlias.
func (c *FighterAliasClient) Delete() *FighterAliasDelete {
	mutation := newFighterAliasMutation(c.config, OpDelete)
	return &FighterAliasDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FighterAliasClient) DeleteOne(fa *FighterAlias) *FighterAliasDeleteOne {
	return c.DeleteOneID(fa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FighterAliasClient) DeleteOneID(id int) *FighterAliasDeleteOne {
	builder := c.Delete().Where(fighteralias.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FighterAliasDeleteOne{builder}
}

// Query returns a query builder for FighterAlias.
func (c *FighterAliasClient) Query() *FighterAliasQuery {
	return &FighterAliasQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFighterAlias},
		inters: c.Interceptors(),
	}
}

// Get returns a FighterAlias entity by its id.
func (c *FighterAliasClient) Get(ctx context.Context, id int) (*FighterAlias, error) {
	return c.Query().Where(fighteralias.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FighterAliasClient) GetX(ctx context.Context, id int) *FighterAlias {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFighter queries the fighter edge of a FighterAlias.
func (c *FighterAliasClient) QueryFighter(fa *FighterAlias) *FighterQuery {
	query := (&FighterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fighteralias.Table, fighteralias.FieldID, id),
			sqlgraph.To(fighter.Table, fighter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fighteralias.FighterTable, fighteralias.FighterColumn),
		)
		fromV = sqlgraph.Neighbors(fa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FighterAliasClient) Hooks() []Hook {
	return c.hooks.FighterAlias
}

// Interceptors returns the client interceptors.
func (c *FighterAliasClient) Interceptors() []Interceptor {
	return c.inters.FighterAlias
}

func (c *FighterAliasClient) mutate(ctx context.Context, m *FighterAliasMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FighterAliasCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FighterAliasUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FighterAliasUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FighterAliasDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FighterAlias mutation op: %q", m.Op())
	}
}

// FighterResultsClient is a client for the FighterResults schema.
type FighterResultsClient struct {
	config
}

// NewFighterResultsClient returns a client for the FighterResults from the given config.
func NewFighterResultsClient(c config) *FighterResultsClient {
	return &FighterResultsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fighterresults.Hooks(f(g(h())))`.
func (c *FighterResultsClient) Use(hooks ...Hook) {
	c.hooks.FighterResults = append(c.hooks.FighterResults, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fighterresults.Intercept(f(g(h())))`.
func (c *FighterResultsClient) Intercept(interceptors ...Interceptor) {
	c.inters.FighterResults = append(c.inters.FighterResults, interceptors...)
}

// Create returns a builder for creating a FighterResults entity.
func (c *FighterResultsClient) Create() *FighterResultsCreate {
	mutation := newFighterResultsMutation(c.config, OpCreate)
	return &FighterResultsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FighterResults entities.
func (c *FighterResultsClient) CreateBulk(builders ...*FighterResultsCreate) *FighterResultsCreateBulk {
	return &FighterResultsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FighterResults.
func (c *FighterResultsClient) Update() *FighterResultsUpdate {
	mutation := newFighterResultsMutation(c.config, OpUpdate)
	return &FighterResultsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FighterResultsClient) UpdateOne(fr *FighterResults) *FighterResultsUpdateOne {
	mutation := newFighterResultsMutation(c.config, OpUpdateOne, withFighterResults(fr))
	return &FighterResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FighterResultsClient) UpdateOneID(id int) *FighterResultsUpdateOne {
	mutation := newFighterResultsMutation(c.config, OpUpdateOne, withFighterResultsID(id))
	return &FighterResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FighterResults.
func (c *FighterResultsClient) Delete() *FighterResultsDelete {
	mutation := newFighterResultsMutation(c.config, OpDelete)
	return &FighterResultsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FighterResultsClient) DeleteOne(fr *FighterResults) *FighterResultsDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FighterResultsClient) DeleteOneID(id int) *FighterResultsDeleteOne {
	builder := c.Delete().Where(fighterresults.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FighterResultsDeleteOne{builder}
}

// Query returns a query builder for FighterResults.
func (c *FighterResultsClient) Query() *FighterResultsQuery {
	return &FighterResultsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFighterResults},
		inters: c.Interceptors(),
	}
}

// Get returns a FighterResults entity by its id.
func (c *FighterResultsClient) Get(ctx context.Context, id int) (*FighterResults, error) {
	return c.Query().Where(fighterresults.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FighterResultsClient) GetX(ctx context.Context, id int) *FighterResults {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFighter queries the fighter edge of a FighterResults.
func (c *FighterResultsClient) QueryFighter(fr *FighterResults) *FighterQuery {
	query := (&FighterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fighterresults.Table, fighterresults.FieldID, id),
			sqlgraph.To(fighter.Table, fighter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fighterresults.FighterTable, fighterresults.FighterColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFight queries the fight edge of a FighterResults.
func (c *FighterResultsClient) QueryFight(fr *FighterResults) *FightQuery {
	query := (&FightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fighterresults.Table, fighterresults.FieldID, id),
			sqlgraph.To(fight.Table, fight.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fighterresults.FightTable, fighterresults.FightColumn),
		)
		fromV = sqlgraph.Neighbors(fr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FighterResultsClient) Hooks() []Hook {
	return c.hooks.FighterResults
}

// Interceptors returns the client interceptors.
func (c *FighterResultsClient) Interceptors() []Interceptor {
	return c.inters.FighterResults
}

func (c *FighterResultsClient) mutate(ctx context.Context, m *FighterResultsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FighterResultsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FighterResultsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FighterResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FighterResultsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FighterResults mutation op: %q", m.Op())
	}
}

// UpcomingEventClient is a client for the UpcomingEvent schema.
type UpcomingEventClient struct {
	config
}

// NewUpcomingEventClient returns a client for the UpcomingEvent from the given config.
func NewUpcomingEventClient(c config) *UpcomingEventClient {
	return &UpcomingEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upcomingevent.Hooks(f(g(h())))`.
func (c *UpcomingEventClient) Use(hooks ...Hook) {
	c.hooks.UpcomingEvent = append(c.hooks.UpcomingEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upcomingevent.Intercept(f(g(h())))`.
func (c *UpcomingEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpcomingEvent = append(c.inters.UpcomingEvent, interceptors...)
}

// Create returns a builder for creating a UpcomingEvent entity.
func (c *UpcomingEventClient) Create() *UpcomingEventCreate {
	mutation := newUpcomingEventMutation(c.config, OpCreate)
	return &UpcomingEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpcomingEvent entities.
func (c *UpcomingEventClient) CreateBulk(builders ...*UpcomingEventCreate) *UpcomingEventCreateBulk {
	return &UpcomingEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpcomingEvent.
func (c *UpcomingEventClient) Update() *UpcomingEventUpdate {
	mutation := newUpcomingEventMutation(c.config, OpUpdate)
	return &UpcomingEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpcomingEventClient) UpdateOne(ue *UpcomingEvent) *UpcomingEventUpdateOne {
	mutation := newUpcomingEventMutation(c.config, OpUpdateOne, withUpcomingEvent(ue))
	return &UpcomingEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpcomingEventClient) UpdateOneID(id int) *UpcomingEventUpdateOne {
	mutation := newUpcomingEventMutation(c.config, OpUpdateOne, withUpcomingEventID(id))
	return &UpcomingEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpcomingEvent.
func (c *UpcomingEventClient) Delete() *UpcomingEventDelete {
	mutation := newUpcomingEventMutation(c.config, OpDelete)
	return &UpcomingEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpcomingEventClient) DeleteOne(ue *UpcomingEvent) *UpcomingEventDeleteOne {
	return c.DeleteOneID(ue.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpcomingEventClient) DeleteOneID(id int) *UpcomingEventDeleteOne {
	builder := c.Delete().Where(upcomingevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpcomingEventDeleteOne{builder}
}

// Query returns a query builder for UpcomingEvent.
func (c *UpcomingEventClient) Query() *UpcomingEventQuery {
	return &UpcomingEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpcomingEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a UpcomingEvent entity by its id.
func (c *UpcomingEventClient) Get(ctx context.Context, id int) (*UpcomingEvent, error) {
	return c.Query().Where(upcomingevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpcomingEventClient) GetX(ctx context.Context, id int) *UpcomingEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpcomingEventClient) Hooks() []Hook {
	return c.hooks.UpcomingEvent
}

// Interceptors returns the client interceptors.
func (c *UpcomingEventClient) Interceptors() []Interceptor {
	return c.inters.UpcomingEvent
}

func (c *UpcomingEventClient) mutate(ctx context.Context, m *UpcomingEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpcomingEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpcomingEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpcomingEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpcomingEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpcomingEvent mutation op: %q", m.Op())
	}
}

// UpcomingFightClient is a client for the UpcomingFight schema.
type UpcomingFightClient struct {
	config
}

// NewUpcomingFightClient returns a client for the UpcomingFight from the given config.
func NewUpcomingFightClient(c config) *UpcomingFightClient {
	return &UpcomingFightClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upcomingfight.Hooks(f(g(h())))`.
func (c *UpcomingFightClient) Use(hooks ...Hook) {
	c.hooks.UpcomingFight = append(c.hooks.UpcomingFight, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upcomingfight.Intercept(f(g(h())))`.
func (c *UpcomingFightClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpcomingFight = append(c.inters.UpcomingFight, interceptors...)
}

// Create returns a builder for creating a UpcomingFight entity.
func (c *UpcomingFightClient) Create() *UpcomingFightCreate {
	mutation := newUpcomingFightMutation(c.config, OpCreate)
	return &UpcomingFightCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpcomingFight entities.
func (c *UpcomingFightClient) CreateBulk(builders ...*UpcomingFightCreate) *UpcomingFightCreateBulk {
	return &UpcomingFightCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpcomingFight.
func (c *UpcomingFightClient) Update() *UpcomingFightUpdate {
	mutation := newUpcomingFightMutation(c.config, OpUpdate)
	return &UpcomingFightUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpcomingFightClient) UpdateOne(uf *UpcomingFight) *UpcomingFightUpdateOne {
	mutation := newUpcomingFightMutation(c.config, OpUpdateOne, withUpcomingFight(uf))
	return &UpcomingFightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpcomingFightClient) UpdateOneID(id int) *UpcomingFightUpdateOne {
	mutation := newUpcomingFightMutation(c.config, OpUpdateOne, withUpcomingFightID(id))
	return &UpcomingFightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpcomingFight.
func (c *UpcomingFightClient) Delete() *UpcomingFightDelete {
	mutation := newUpcomingFightMutation(c.config, OpDelete)
	return &UpcomingFightDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpcomingFightClient) DeleteOne(uf *UpcomingFight) *UpcomingFightDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpcomingFightClient) DeleteOneID(id int) *UpcomingFightDeleteOne {
	builder := c.Delete().Where(upcomingfight.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpcomingFightDeleteOne{builder}
}

// Query returns a query builder for UpcomingFight.
func (c *UpcomingFightClient) Query() *UpcomingFightQuery {
	return &UpcomingFightQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpcomingFight},
		inters: c.Interceptors(),
	}
}

// Get returns a UpcomingFight entity by its id.
func (c *UpcomingFightClient) Get(ctx context.Context, id int) (*UpcomingFight, error) {
	return c.Query().Where(upcomingfight.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpcomingFightClient) GetX(ctx context.Context, id int) *UpcomingFight {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UpcomingFightClient) Hooks() []Hook {
	return c.hooks.UpcomingFight
}

// Interceptors returns the client interceptors.
func (c *UpcomingFightClient) Interceptors() []Interceptor {
	return c.inters.UpcomingFight
}

func (c *UpcomingFightClient) mutate(ctx context.Context, m *UpcomingFightMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpcomingFightCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpcomingFightUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpcomingFightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpcomingFightDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpcomingFight mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Event, Fight, Fighter, FighterAlias, FighterResults, UpcomingEvent,
		UpcomingFight []ent.Hook
	}
	inters struct {
		Event, Fight, Fighter, FighterAlias, FighterResults, UpcomingEvent,
		UpcomingFight []ent.Interceptor
	}
)
