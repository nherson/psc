// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/event"
	"github.com/nherson/psc/api/ent/fight"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighterresults"
)

// FightCreate is the builder for creating a Fight entity.
type FightCreate struct {
	config
	mutation *FightMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FightCreate) SetCreatedAt(t time.Time) *FightCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FightCreate) SetNillableCreatedAt(t *time.Time) *FightCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FightCreate) SetUpdatedAt(t time.Time) *FightCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FightCreate) SetNillableUpdatedAt(t *time.Time) *FightCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (fc *FightCreate) SetUfcFightID(s string) *FightCreate {
	fc.mutation.SetUfcFightID(s)
	return fc
}

// SetCardOrder sets the "card_order" field.
func (fc *FightCreate) SetCardOrder(i int) *FightCreate {
	fc.mutation.SetCardOrder(i)
	return fc
}

// SetCardSegment sets the "card_segment" field.
func (fc *FightCreate) SetCardSegment(s string) *FightCreate {
	fc.mutation.SetCardSegment(s)
	return fc
}

// SetResultMethod sets the "result_method" field.
func (fc *FightCreate) SetResultMethod(s string) *FightCreate {
	fc.mutation.SetResultMethod(s)
	return fc
}

// SetResultEndingRound sets the "result_ending_round" field.
func (fc *FightCreate) SetResultEndingRound(i int) *FightCreate {
	fc.mutation.SetResultEndingRound(i)
	return fc
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (fc *FightCreate) SetResultEndingTimeSeconds(i int) *FightCreate {
	fc.mutation.SetResultEndingTimeSeconds(i)
	return fc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (fc *FightCreate) SetEventID(id int) *FightCreate {
	fc.mutation.SetEventID(id)
	return fc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (fc *FightCreate) SetNillableEventID(id *int) *FightCreate {
	if id != nil {
		fc = fc.SetEventID(*id)
	}
	return fc
}

// SetEvent sets the "event" edge to the Event entity.
func (fc *FightCreate) SetEvent(e *Event) *FightCreate {
	return fc.SetEventID(e.ID)
}

// AddFighterIDs adds the "fighters" edge to the Fighter entity by IDs.
func (fc *FightCreate) AddFighterIDs(ids ...int) *FightCreate {
	fc.mutation.AddFighterIDs(ids...)
	return fc
}

// AddFighters adds the "fighters" edges to the Fighter entity.
func (fc *FightCreate) AddFighters(f ...*Fighter) *FightCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFighterIDs(ids...)
}

// AddFighterResultIDs adds the "fighter_results" edge to the FighterResults entity by IDs.
func (fc *FightCreate) AddFighterResultIDs(ids ...int) *FightCreate {
	fc.mutation.AddFighterResultIDs(ids...)
	return fc
}

// AddFighterResults adds the "fighter_results" edges to the FighterResults entity.
func (fc *FightCreate) AddFighterResults(f ...*FighterResults) *FightCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFighterResultIDs(ids...)
}

// Mutation returns the FightMutation object of the builder.
func (fc *FightCreate) Mutation() *FightMutation {
	return fc.mutation
}

// Save creates the Fight in the database.
func (fc *FightCreate) Save(ctx context.Context) (*Fight, error) {
	fc.defaults()
	return withHooks[*Fight, FightMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FightCreate) SaveX(ctx context.Context) *Fight {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FightCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FightCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FightCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := fight.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := fight.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FightCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Fight.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Fight.updated_at"`)}
	}
	if _, ok := fc.mutation.UfcFightID(); !ok {
		return &ValidationError{Name: "ufc_fight_id", err: errors.New(`ent: missing required field "Fight.ufc_fight_id"`)}
	}
	if v, ok := fc.mutation.UfcFightID(); ok {
		if err := fight.UfcFightIDValidator(v); err != nil {
			return &ValidationError{Name: "ufc_fight_id", err: fmt.Errorf(`ent: validator failed for field "Fight.ufc_fight_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CardOrder(); !ok {
		return &ValidationError{Name: "card_order", err: errors.New(`ent: missing required field "Fight.card_order"`)}
	}
	if v, ok := fc.mutation.CardOrder(); ok {
		if err := fight.CardOrderValidator(v); err != nil {
			return &ValidationError{Name: "card_order", err: fmt.Errorf(`ent: validator failed for field "Fight.card_order": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CardSegment(); !ok {
		return &ValidationError{Name: "card_segment", err: errors.New(`ent: missing required field "Fight.card_segment"`)}
	}
	if v, ok := fc.mutation.CardSegment(); ok {
		if err := fight.CardSegmentValidator(v); err != nil {
			return &ValidationError{Name: "card_segment", err: fmt.Errorf(`ent: validator failed for field "Fight.card_segment": %w`, err)}
		}
	}
	if _, ok := fc.mutation.ResultMethod(); !ok {
		return &ValidationError{Name: "result_method", err: errors.New(`ent: missing required field "Fight.result_method"`)}
	}
	if v, ok := fc.mutation.ResultMethod(); ok {
		if err := fight.ResultMethodValidator(v); err != nil {
			return &ValidationError{Name: "result_method", err: fmt.Errorf(`ent: validator failed for field "Fight.result_method": %w`, err)}
		}
	}
	if _, ok := fc.mutation.ResultEndingRound(); !ok {
		return &ValidationError{Name: "result_ending_round", err: errors.New(`ent: missing required field "Fight.result_ending_round"`)}
	}
	if _, ok := fc.mutation.ResultEndingTimeSeconds(); !ok {
		return &ValidationError{Name: "result_ending_time_seconds", err: errors.New(`ent: missing required field "Fight.result_ending_time_seconds"`)}
	}
	return nil
}

func (fc *FightCreate) sqlSave(ctx context.Context) (*Fight, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FightCreate) createSpec() (*Fight, *sqlgraph.CreateSpec) {
	var (
		_node = &Fight{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fight.Table, sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(fight.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(fight.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.UfcFightID(); ok {
		_spec.SetField(fight.FieldUfcFightID, field.TypeString, value)
		_node.UfcFightID = value
	}
	if value, ok := fc.mutation.CardOrder(); ok {
		_spec.SetField(fight.FieldCardOrder, field.TypeInt, value)
		_node.CardOrder = value
	}
	if value, ok := fc.mutation.CardSegment(); ok {
		_spec.SetField(fight.FieldCardSegment, field.TypeString, value)
		_node.CardSegment = value
	}
	if value, ok := fc.mutation.ResultMethod(); ok {
		_spec.SetField(fight.FieldResultMethod, field.TypeString, value)
		_node.ResultMethod = value
	}
	if value, ok := fc.mutation.ResultEndingRound(); ok {
		_spec.SetField(fight.FieldResultEndingRound, field.TypeInt, value)
		_node.ResultEndingRound = value
	}
	if value, ok := fc.mutation.ResultEndingTimeSeconds(); ok {
		_spec.SetField(fight.FieldResultEndingTimeSeconds, field.TypeInt, value)
		_node.ResultEndingTimeSeconds = value
	}
	if nodes := fc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fight.EventTable,
			Columns: []string{fight.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_fights = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FightersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fc.config, mutation: newFighterResultsMutation(fc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FighterResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fight.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FightUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FightCreate) OnConflict(opts ...sql.ConflictOption) *FightUpsertOne {
	fc.conflict = opts
	return &FightUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FightCreate) OnConflictColumns(columns ...string) *FightUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FightUpsertOne{
		create: fc,
	}
}

type (
	// FightUpsertOne is the builder for "upsert"-ing
	//  one Fight node.
	FightUpsertOne struct {
		create *FightCreate
	}

	// FightUpsert is the "OnConflict" setter.
	FightUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FightUpsert) SetUpdatedAt(v time.Time) *FightUpsert {
	u.Set(fight.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FightUpsert) UpdateUpdatedAt() *FightUpsert {
	u.SetExcluded(fight.FieldUpdatedAt)
	return u
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (u *FightUpsert) SetUfcFightID(v string) *FightUpsert {
	u.Set(fight.FieldUfcFightID, v)
	return u
}

// UpdateUfcFightID sets the "ufc_fight_id" field to the value that was provided on create.
func (u *FightUpsert) UpdateUfcFightID() *FightUpsert {
	u.SetExcluded(fight.FieldUfcFightID)
	return u
}

// SetCardOrder sets the "card_order" field.
func (u *FightUpsert) SetCardOrder(v int) *FightUpsert {
	u.Set(fight.FieldCardOrder, v)
	return u
}

// UpdateCardOrder sets the "card_order" field to the value that was provided on create.
func (u *FightUpsert) UpdateCardOrder() *FightUpsert {
	u.SetExcluded(fight.FieldCardOrder)
	return u
}

// AddCardOrder adds v to the "card_order" field.
func (u *FightUpsert) AddCardOrder(v int) *FightUpsert {
	u.Add(fight.FieldCardOrder, v)
	return u
}

// SetCardSegment sets the "card_segment" field.
func (u *FightUpsert) SetCardSegment(v string) *FightUpsert {
	u.Set(fight.FieldCardSegment, v)
	return u
}

// UpdateCardSegment sets the "card_segment" field to the value that was provided on create.
func (u *FightUpsert) UpdateCardSegment() *FightUpsert {
	u.SetExcluded(fight.FieldCardSegment)
	return u
}

// SetResultMethod sets the "result_method" field.
func (u *FightUpsert) SetResultMethod(v string) *FightUpsert {
	u.Set(fight.FieldResultMethod, v)
	return u
}

// UpdateResultMethod sets the "result_method" field to the value that was provided on create.
func (u *FightUpsert) UpdateResultMethod() *FightUpsert {
	u.SetExcluded(fight.FieldResultMethod)
	return u
}

// SetResultEndingRound sets the "result_ending_round" field.
func (u *FightUpsert) SetResultEndingRound(v int) *FightUpsert {
	u.Set(fight.FieldResultEndingRound, v)
	return u
}

// UpdateResultEndingRound sets the "result_ending_round" field to the value that was provided on create.
func (u *FightUpsert) UpdateResultEndingRound() *FightUpsert {
	u.SetExcluded(fight.FieldResultEndingRound)
	return u
}

// AddResultEndingRound adds v to the "result_ending_round" field.
func (u *FightUpsert) AddResultEndingRound(v int) *FightUpsert {
	u.Add(fight.FieldResultEndingRound, v)
	return u
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (u *FightUpsert) SetResultEndingTimeSeconds(v int) *FightUpsert {
	u.Set(fight.FieldResultEndingTimeSeconds, v)
	return u
}

// UpdateResultEndingTimeSeconds sets the "result_ending_time_seconds" field to the value that was provided on create.
func (u *FightUpsert) UpdateResultEndingTimeSeconds() *FightUpsert {
	u.SetExcluded(fight.FieldResultEndingTimeSeconds)
	return u
}

// AddResultEndingTimeSeconds adds v to the "result_ending_time_seconds" field.
func (u *FightUpsert) AddResultEndingTimeSeconds(v int) *FightUpsert {
	u.Add(fight.FieldResultEndingTimeSeconds, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Fight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FightUpsertOne) UpdateNewValues() *FightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(fight.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fight.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FightUpsertOne) Ignore() *FightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FightUpsertOne) DoNothing() *FightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FightCreate.OnConflict
// documentation for more info.
func (u *FightUpsertOne) Update(set func(*FightUpsert)) *FightUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FightUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FightUpsertOne) SetUpdatedAt(v time.Time) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateUpdatedAt() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (u *FightUpsertOne) SetUfcFightID(v string) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetUfcFightID(v)
	})
}

// UpdateUfcFightID sets the "ufc_fight_id" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateUfcFightID() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateUfcFightID()
	})
}

// SetCardOrder sets the "card_order" field.
func (u *FightUpsertOne) SetCardOrder(v int) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetCardOrder(v)
	})
}

// AddCardOrder adds v to the "card_order" field.
func (u *FightUpsertOne) AddCardOrder(v int) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.AddCardOrder(v)
	})
}

// UpdateCardOrder sets the "card_order" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateCardOrder() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateCardOrder()
	})
}

// SetCardSegment sets the "card_segment" field.
func (u *FightUpsertOne) SetCardSegment(v string) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetCardSegment(v)
	})
}

// UpdateCardSegment sets the "card_segment" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateCardSegment() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateCardSegment()
	})
}

// SetResultMethod sets the "result_method" field.
func (u *FightUpsertOne) SetResultMethod(v string) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetResultMethod(v)
	})
}

// UpdateResultMethod sets the "result_method" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateResultMethod() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateResultMethod()
	})
}

// SetResultEndingRound sets the "result_ending_round" field.
func (u *FightUpsertOne) SetResultEndingRound(v int) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetResultEndingRound(v)
	})
}

// AddResultEndingRound adds v to the "result_ending_round" field.
func (u *FightUpsertOne) AddResultEndingRound(v int) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.AddResultEndingRound(v)
	})
}

// UpdateResultEndingRound sets the "result_ending_round" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateResultEndingRound() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateResultEndingRound()
	})
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (u *FightUpsertOne) SetResultEndingTimeSeconds(v int) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.SetResultEndingTimeSeconds(v)
	})
}

// AddResultEndingTimeSeconds adds v to the "result_ending_time_seconds" field.
func (u *FightUpsertOne) AddResultEndingTimeSeconds(v int) *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.AddResultEndingTimeSeconds(v)
	})
}

// UpdateResultEndingTimeSeconds sets the "result_ending_time_seconds" field to the value that was provided on create.
func (u *FightUpsertOne) UpdateResultEndingTimeSeconds() *FightUpsertOne {
	return u.Update(func(s *FightUpsert) {
		s.UpdateResultEndingTimeSeconds()
	})
}

// Exec executes the query.
func (u *FightUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FightCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FightUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FightUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FightUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FightCreateBulk is the builder for creating many Fight entities in bulk.
type FightCreateBulk struct {
	config
	builders []*FightCreate
	conflict []sql.ConflictOption
}

// Save creates the Fight entities in the database.
func (fcb *FightCreateBulk) Save(ctx context.Context) ([]*Fight, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fight, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FightCreateBulk) SaveX(ctx context.Context) []*Fight {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FightCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FightCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fight.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FightUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FightCreateBulk) OnConflict(opts ...sql.ConflictOption) *FightUpsertBulk {
	fcb.conflict = opts
	return &FightUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fight.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FightCreateBulk) OnConflictColumns(columns ...string) *FightUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FightUpsertBulk{
		create: fcb,
	}
}

// FightUpsertBulk is the builder for "upsert"-ing
// a bulk of Fight nodes.
type FightUpsertBulk struct {
	create *FightCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fight.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FightUpsertBulk) UpdateNewValues() *FightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(fight.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fight.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FightUpsertBulk) Ignore() *FightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FightUpsertBulk) DoNothing() *FightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FightCreateBulk.OnConflict
// documentation for more info.
func (u *FightUpsertBulk) Update(set func(*FightUpsert)) *FightUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FightUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FightUpsertBulk) SetUpdatedAt(v time.Time) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateUpdatedAt() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (u *FightUpsertBulk) SetUfcFightID(v string) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetUfcFightID(v)
	})
}

// UpdateUfcFightID sets the "ufc_fight_id" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateUfcFightID() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateUfcFightID()
	})
}

// SetCardOrder sets the "card_order" field.
func (u *FightUpsertBulk) SetCardOrder(v int) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetCardOrder(v)
	})
}

// AddCardOrder adds v to the "card_order" field.
func (u *FightUpsertBulk) AddCardOrder(v int) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.AddCardOrder(v)
	})
}

// UpdateCardOrder sets the "card_order" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateCardOrder() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateCardOrder()
	})
}

// SetCardSegment sets the "card_segment" field.
func (u *FightUpsertBulk) SetCardSegment(v string) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetCardSegment(v)
	})
}

// UpdateCardSegment sets the "card_segment" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateCardSegment() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateCardSegment()
	})
}

// SetResultMethod sets the "result_method" field.
func (u *FightUpsertBulk) SetResultMethod(v string) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetResultMethod(v)
	})
}

// UpdateResultMethod sets the "result_method" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateResultMethod() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateResultMethod()
	})
}

// SetResultEndingRound sets the "result_ending_round" field.
func (u *FightUpsertBulk) SetResultEndingRound(v int) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetResultEndingRound(v)
	})
}

// AddResultEndingRound adds v to the "result_ending_round" field.
func (u *FightUpsertBulk) AddResultEndingRound(v int) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.AddResultEndingRound(v)
	})
}

// UpdateResultEndingRound sets the "result_ending_round" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateResultEndingRound() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateResultEndingRound()
	})
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (u *FightUpsertBulk) SetResultEndingTimeSeconds(v int) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.SetResultEndingTimeSeconds(v)
	})
}

// AddResultEndingTimeSeconds adds v to the "result_ending_time_seconds" field.
func (u *FightUpsertBulk) AddResultEndingTimeSeconds(v int) *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.AddResultEndingTimeSeconds(v)
	})
}

// UpdateResultEndingTimeSeconds sets the "result_ending_time_seconds" field to the value that was provided on create.
func (u *FightUpsertBulk) UpdateResultEndingTimeSeconds() *FightUpsertBulk {
	return u.Update(func(s *FightUpsert) {
		s.UpdateResultEndingTimeSeconds()
	})
}

// Exec executes the query.
func (u *FightUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FightCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FightCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FightUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
