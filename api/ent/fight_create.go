// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/event"
	"github.com/nherson/psc/api/ent/fight"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighterresults"
)

// FightCreate is the builder for creating a Fight entity.
type FightCreate struct {
	config
	mutation *FightMutation
	hooks    []Hook
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (fc *FightCreate) SetUfcFightID(s string) *FightCreate {
	fc.mutation.SetUfcFightID(s)
	return fc
}

// SetCardOrder sets the "card_order" field.
func (fc *FightCreate) SetCardOrder(i int) *FightCreate {
	fc.mutation.SetCardOrder(i)
	return fc
}

// SetCardSegment sets the "card_segment" field.
func (fc *FightCreate) SetCardSegment(s string) *FightCreate {
	fc.mutation.SetCardSegment(s)
	return fc
}

// SetResultMethod sets the "result_method" field.
func (fc *FightCreate) SetResultMethod(s string) *FightCreate {
	fc.mutation.SetResultMethod(s)
	return fc
}

// SetResultEndingRound sets the "result_ending_round" field.
func (fc *FightCreate) SetResultEndingRound(i int) *FightCreate {
	fc.mutation.SetResultEndingRound(i)
	return fc
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (fc *FightCreate) SetResultEndingTimeSeconds(i int) *FightCreate {
	fc.mutation.SetResultEndingTimeSeconds(i)
	return fc
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (fc *FightCreate) SetEventID(id int) *FightCreate {
	fc.mutation.SetEventID(id)
	return fc
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (fc *FightCreate) SetNillableEventID(id *int) *FightCreate {
	if id != nil {
		fc = fc.SetEventID(*id)
	}
	return fc
}

// SetEvent sets the "event" edge to the Event entity.
func (fc *FightCreate) SetEvent(e *Event) *FightCreate {
	return fc.SetEventID(e.ID)
}

// AddFighterIDs adds the "fighters" edge to the Fighter entity by IDs.
func (fc *FightCreate) AddFighterIDs(ids ...int) *FightCreate {
	fc.mutation.AddFighterIDs(ids...)
	return fc
}

// AddFighters adds the "fighters" edges to the Fighter entity.
func (fc *FightCreate) AddFighters(f ...*Fighter) *FightCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFighterIDs(ids...)
}

// AddFighterResultIDs adds the "fighter_results" edge to the FighterResults entity by IDs.
func (fc *FightCreate) AddFighterResultIDs(ids ...int) *FightCreate {
	fc.mutation.AddFighterResultIDs(ids...)
	return fc
}

// AddFighterResults adds the "fighter_results" edges to the FighterResults entity.
func (fc *FightCreate) AddFighterResults(f ...*FighterResults) *FightCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFighterResultIDs(ids...)
}

// Mutation returns the FightMutation object of the builder.
func (fc *FightCreate) Mutation() *FightMutation {
	return fc.mutation
}

// Save creates the Fight in the database.
func (fc *FightCreate) Save(ctx context.Context) (*Fight, error) {
	return withHooks[*Fight, FightMutation](ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FightCreate) SaveX(ctx context.Context) *Fight {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FightCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FightCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FightCreate) check() error {
	if _, ok := fc.mutation.UfcFightID(); !ok {
		return &ValidationError{Name: "ufc_fight_id", err: errors.New(`ent: missing required field "Fight.ufc_fight_id"`)}
	}
	if v, ok := fc.mutation.UfcFightID(); ok {
		if err := fight.UfcFightIDValidator(v); err != nil {
			return &ValidationError{Name: "ufc_fight_id", err: fmt.Errorf(`ent: validator failed for field "Fight.ufc_fight_id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CardOrder(); !ok {
		return &ValidationError{Name: "card_order", err: errors.New(`ent: missing required field "Fight.card_order"`)}
	}
	if v, ok := fc.mutation.CardOrder(); ok {
		if err := fight.CardOrderValidator(v); err != nil {
			return &ValidationError{Name: "card_order", err: fmt.Errorf(`ent: validator failed for field "Fight.card_order": %w`, err)}
		}
	}
	if _, ok := fc.mutation.CardSegment(); !ok {
		return &ValidationError{Name: "card_segment", err: errors.New(`ent: missing required field "Fight.card_segment"`)}
	}
	if v, ok := fc.mutation.CardSegment(); ok {
		if err := fight.CardSegmentValidator(v); err != nil {
			return &ValidationError{Name: "card_segment", err: fmt.Errorf(`ent: validator failed for field "Fight.card_segment": %w`, err)}
		}
	}
	if _, ok := fc.mutation.ResultMethod(); !ok {
		return &ValidationError{Name: "result_method", err: errors.New(`ent: missing required field "Fight.result_method"`)}
	}
	if v, ok := fc.mutation.ResultMethod(); ok {
		if err := fight.ResultMethodValidator(v); err != nil {
			return &ValidationError{Name: "result_method", err: fmt.Errorf(`ent: validator failed for field "Fight.result_method": %w`, err)}
		}
	}
	if _, ok := fc.mutation.ResultEndingRound(); !ok {
		return &ValidationError{Name: "result_ending_round", err: errors.New(`ent: missing required field "Fight.result_ending_round"`)}
	}
	if _, ok := fc.mutation.ResultEndingTimeSeconds(); !ok {
		return &ValidationError{Name: "result_ending_time_seconds", err: errors.New(`ent: missing required field "Fight.result_ending_time_seconds"`)}
	}
	return nil
}

func (fc *FightCreate) sqlSave(ctx context.Context) (*Fight, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FightCreate) createSpec() (*Fight, *sqlgraph.CreateSpec) {
	var (
		_node = &Fight{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fight.Table, sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt))
	)
	if value, ok := fc.mutation.UfcFightID(); ok {
		_spec.SetField(fight.FieldUfcFightID, field.TypeString, value)
		_node.UfcFightID = value
	}
	if value, ok := fc.mutation.CardOrder(); ok {
		_spec.SetField(fight.FieldCardOrder, field.TypeInt, value)
		_node.CardOrder = value
	}
	if value, ok := fc.mutation.CardSegment(); ok {
		_spec.SetField(fight.FieldCardSegment, field.TypeString, value)
		_node.CardSegment = value
	}
	if value, ok := fc.mutation.ResultMethod(); ok {
		_spec.SetField(fight.FieldResultMethod, field.TypeString, value)
		_node.ResultMethod = value
	}
	if value, ok := fc.mutation.ResultEndingRound(); ok {
		_spec.SetField(fight.FieldResultEndingRound, field.TypeInt, value)
		_node.ResultEndingRound = value
	}
	if value, ok := fc.mutation.ResultEndingTimeSeconds(); ok {
		_spec.SetField(fight.FieldResultEndingTimeSeconds, field.TypeInt, value)
		_node.ResultEndingTimeSeconds = value
	}
	if nodes := fc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fight.EventTable,
			Columns: []string{fight.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_fights = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FightersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FighterResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FightCreateBulk is the builder for creating many Fight entities in bulk.
type FightCreateBulk struct {
	config
	builders []*FightCreate
}

// Save creates the Fight entities in the database.
func (fcb *FightCreateBulk) Save(ctx context.Context) ([]*Fight, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fight, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FightCreateBulk) SaveX(ctx context.Context) []*Fight {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FightCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FightCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
