// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/event"
	"github.com/nherson/psc/api/ent/fight"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighterresults"
	"github.com/nherson/psc/api/ent/predicate"
)

// FightUpdate is the builder for updating Fight entities.
type FightUpdate struct {
	config
	hooks    []Hook
	mutation *FightMutation
}

// Where appends a list predicates to the FightUpdate builder.
func (fu *FightUpdate) Where(ps ...predicate.Fight) *FightUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FightUpdate) SetUpdatedAt(t time.Time) *FightUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (fu *FightUpdate) SetUfcFightID(s string) *FightUpdate {
	fu.mutation.SetUfcFightID(s)
	return fu
}

// SetCardOrder sets the "card_order" field.
func (fu *FightUpdate) SetCardOrder(i int) *FightUpdate {
	fu.mutation.ResetCardOrder()
	fu.mutation.SetCardOrder(i)
	return fu
}

// AddCardOrder adds i to the "card_order" field.
func (fu *FightUpdate) AddCardOrder(i int) *FightUpdate {
	fu.mutation.AddCardOrder(i)
	return fu
}

// SetCardSegment sets the "card_segment" field.
func (fu *FightUpdate) SetCardSegment(s string) *FightUpdate {
	fu.mutation.SetCardSegment(s)
	return fu
}

// SetResultMethod sets the "result_method" field.
func (fu *FightUpdate) SetResultMethod(s string) *FightUpdate {
	fu.mutation.SetResultMethod(s)
	return fu
}

// SetResultEndingRound sets the "result_ending_round" field.
func (fu *FightUpdate) SetResultEndingRound(i int) *FightUpdate {
	fu.mutation.ResetResultEndingRound()
	fu.mutation.SetResultEndingRound(i)
	return fu
}

// AddResultEndingRound adds i to the "result_ending_round" field.
func (fu *FightUpdate) AddResultEndingRound(i int) *FightUpdate {
	fu.mutation.AddResultEndingRound(i)
	return fu
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (fu *FightUpdate) SetResultEndingTimeSeconds(i int) *FightUpdate {
	fu.mutation.ResetResultEndingTimeSeconds()
	fu.mutation.SetResultEndingTimeSeconds(i)
	return fu
}

// AddResultEndingTimeSeconds adds i to the "result_ending_time_seconds" field.
func (fu *FightUpdate) AddResultEndingTimeSeconds(i int) *FightUpdate {
	fu.mutation.AddResultEndingTimeSeconds(i)
	return fu
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (fu *FightUpdate) SetEventID(id int) *FightUpdate {
	fu.mutation.SetEventID(id)
	return fu
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (fu *FightUpdate) SetNillableEventID(id *int) *FightUpdate {
	if id != nil {
		fu = fu.SetEventID(*id)
	}
	return fu
}

// SetEvent sets the "event" edge to the Event entity.
func (fu *FightUpdate) SetEvent(e *Event) *FightUpdate {
	return fu.SetEventID(e.ID)
}

// AddFighterIDs adds the "fighters" edge to the Fighter entity by IDs.
func (fu *FightUpdate) AddFighterIDs(ids ...int) *FightUpdate {
	fu.mutation.AddFighterIDs(ids...)
	return fu
}

// AddFighters adds the "fighters" edges to the Fighter entity.
func (fu *FightUpdate) AddFighters(f ...*Fighter) *FightUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFighterIDs(ids...)
}

// AddFighterResultIDs adds the "fighter_results" edge to the FighterResults entity by IDs.
func (fu *FightUpdate) AddFighterResultIDs(ids ...int) *FightUpdate {
	fu.mutation.AddFighterResultIDs(ids...)
	return fu
}

// AddFighterResults adds the "fighter_results" edges to the FighterResults entity.
func (fu *FightUpdate) AddFighterResults(f ...*FighterResults) *FightUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFighterResultIDs(ids...)
}

// Mutation returns the FightMutation object of the builder.
func (fu *FightUpdate) Mutation() *FightMutation {
	return fu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (fu *FightUpdate) ClearEvent() *FightUpdate {
	fu.mutation.ClearEvent()
	return fu
}

// ClearFighters clears all "fighters" edges to the Fighter entity.
func (fu *FightUpdate) ClearFighters() *FightUpdate {
	fu.mutation.ClearFighters()
	return fu
}

// RemoveFighterIDs removes the "fighters" edge to Fighter entities by IDs.
func (fu *FightUpdate) RemoveFighterIDs(ids ...int) *FightUpdate {
	fu.mutation.RemoveFighterIDs(ids...)
	return fu
}

// RemoveFighters removes "fighters" edges to Fighter entities.
func (fu *FightUpdate) RemoveFighters(f ...*Fighter) *FightUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFighterIDs(ids...)
}

// ClearFighterResults clears all "fighter_results" edges to the FighterResults entity.
func (fu *FightUpdate) ClearFighterResults() *FightUpdate {
	fu.mutation.ClearFighterResults()
	return fu
}

// RemoveFighterResultIDs removes the "fighter_results" edge to FighterResults entities by IDs.
func (fu *FightUpdate) RemoveFighterResultIDs(ids ...int) *FightUpdate {
	fu.mutation.RemoveFighterResultIDs(ids...)
	return fu
}

// RemoveFighterResults removes "fighter_results" edges to FighterResults entities.
func (fu *FightUpdate) RemoveFighterResults(f ...*FighterResults) *FightUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFighterResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FightUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks[int, FightMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FightUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FightUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FightUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FightUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := fight.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FightUpdate) check() error {
	if v, ok := fu.mutation.UfcFightID(); ok {
		if err := fight.UfcFightIDValidator(v); err != nil {
			return &ValidationError{Name: "ufc_fight_id", err: fmt.Errorf(`ent: validator failed for field "Fight.ufc_fight_id": %w`, err)}
		}
	}
	if v, ok := fu.mutation.CardOrder(); ok {
		if err := fight.CardOrderValidator(v); err != nil {
			return &ValidationError{Name: "card_order", err: fmt.Errorf(`ent: validator failed for field "Fight.card_order": %w`, err)}
		}
	}
	if v, ok := fu.mutation.CardSegment(); ok {
		if err := fight.CardSegmentValidator(v); err != nil {
			return &ValidationError{Name: "card_segment", err: fmt.Errorf(`ent: validator failed for field "Fight.card_segment": %w`, err)}
		}
	}
	if v, ok := fu.mutation.ResultMethod(); ok {
		if err := fight.ResultMethodValidator(v); err != nil {
			return &ValidationError{Name: "result_method", err: fmt.Errorf(`ent: validator failed for field "Fight.result_method": %w`, err)}
		}
	}
	return nil
}

func (fu *FightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fight.Table, fight.Columns, sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(fight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UfcFightID(); ok {
		_spec.SetField(fight.FieldUfcFightID, field.TypeString, value)
	}
	if value, ok := fu.mutation.CardOrder(); ok {
		_spec.SetField(fight.FieldCardOrder, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedCardOrder(); ok {
		_spec.AddField(fight.FieldCardOrder, field.TypeInt, value)
	}
	if value, ok := fu.mutation.CardSegment(); ok {
		_spec.SetField(fight.FieldCardSegment, field.TypeString, value)
	}
	if value, ok := fu.mutation.ResultMethod(); ok {
		_spec.SetField(fight.FieldResultMethod, field.TypeString, value)
	}
	if value, ok := fu.mutation.ResultEndingRound(); ok {
		_spec.SetField(fight.FieldResultEndingRound, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedResultEndingRound(); ok {
		_spec.AddField(fight.FieldResultEndingRound, field.TypeInt, value)
	}
	if value, ok := fu.mutation.ResultEndingTimeSeconds(); ok {
		_spec.SetField(fight.FieldResultEndingTimeSeconds, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedResultEndingTimeSeconds(); ok {
		_spec.AddField(fight.FieldResultEndingTimeSeconds, field.TypeInt, value)
	}
	if fu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fight.EventTable,
			Columns: []string{fight.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fight.EventTable,
			Columns: []string{fight.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		createE := &FighterResultsCreate{config: fu.config, mutation: newFighterResultsMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFightersIDs(); len(nodes) > 0 && !fu.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fu.config, mutation: newFighterResultsMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FightersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fu.config, mutation: newFighterResultsMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFighterResultsIDs(); len(nodes) > 0 && !fu.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FighterResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FightUpdateOne is the builder for updating a single Fight entity.
type FightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FightMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FightUpdateOne) SetUpdatedAt(t time.Time) *FightUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetUfcFightID sets the "ufc_fight_id" field.
func (fuo *FightUpdateOne) SetUfcFightID(s string) *FightUpdateOne {
	fuo.mutation.SetUfcFightID(s)
	return fuo
}

// SetCardOrder sets the "card_order" field.
func (fuo *FightUpdateOne) SetCardOrder(i int) *FightUpdateOne {
	fuo.mutation.ResetCardOrder()
	fuo.mutation.SetCardOrder(i)
	return fuo
}

// AddCardOrder adds i to the "card_order" field.
func (fuo *FightUpdateOne) AddCardOrder(i int) *FightUpdateOne {
	fuo.mutation.AddCardOrder(i)
	return fuo
}

// SetCardSegment sets the "card_segment" field.
func (fuo *FightUpdateOne) SetCardSegment(s string) *FightUpdateOne {
	fuo.mutation.SetCardSegment(s)
	return fuo
}

// SetResultMethod sets the "result_method" field.
func (fuo *FightUpdateOne) SetResultMethod(s string) *FightUpdateOne {
	fuo.mutation.SetResultMethod(s)
	return fuo
}

// SetResultEndingRound sets the "result_ending_round" field.
func (fuo *FightUpdateOne) SetResultEndingRound(i int) *FightUpdateOne {
	fuo.mutation.ResetResultEndingRound()
	fuo.mutation.SetResultEndingRound(i)
	return fuo
}

// AddResultEndingRound adds i to the "result_ending_round" field.
func (fuo *FightUpdateOne) AddResultEndingRound(i int) *FightUpdateOne {
	fuo.mutation.AddResultEndingRound(i)
	return fuo
}

// SetResultEndingTimeSeconds sets the "result_ending_time_seconds" field.
func (fuo *FightUpdateOne) SetResultEndingTimeSeconds(i int) *FightUpdateOne {
	fuo.mutation.ResetResultEndingTimeSeconds()
	fuo.mutation.SetResultEndingTimeSeconds(i)
	return fuo
}

// AddResultEndingTimeSeconds adds i to the "result_ending_time_seconds" field.
func (fuo *FightUpdateOne) AddResultEndingTimeSeconds(i int) *FightUpdateOne {
	fuo.mutation.AddResultEndingTimeSeconds(i)
	return fuo
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (fuo *FightUpdateOne) SetEventID(id int) *FightUpdateOne {
	fuo.mutation.SetEventID(id)
	return fuo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (fuo *FightUpdateOne) SetNillableEventID(id *int) *FightUpdateOne {
	if id != nil {
		fuo = fuo.SetEventID(*id)
	}
	return fuo
}

// SetEvent sets the "event" edge to the Event entity.
func (fuo *FightUpdateOne) SetEvent(e *Event) *FightUpdateOne {
	return fuo.SetEventID(e.ID)
}

// AddFighterIDs adds the "fighters" edge to the Fighter entity by IDs.
func (fuo *FightUpdateOne) AddFighterIDs(ids ...int) *FightUpdateOne {
	fuo.mutation.AddFighterIDs(ids...)
	return fuo
}

// AddFighters adds the "fighters" edges to the Fighter entity.
func (fuo *FightUpdateOne) AddFighters(f ...*Fighter) *FightUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFighterIDs(ids...)
}

// AddFighterResultIDs adds the "fighter_results" edge to the FighterResults entity by IDs.
func (fuo *FightUpdateOne) AddFighterResultIDs(ids ...int) *FightUpdateOne {
	fuo.mutation.AddFighterResultIDs(ids...)
	return fuo
}

// AddFighterResults adds the "fighter_results" edges to the FighterResults entity.
func (fuo *FightUpdateOne) AddFighterResults(f ...*FighterResults) *FightUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFighterResultIDs(ids...)
}

// Mutation returns the FightMutation object of the builder.
func (fuo *FightUpdateOne) Mutation() *FightMutation {
	return fuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (fuo *FightUpdateOne) ClearEvent() *FightUpdateOne {
	fuo.mutation.ClearEvent()
	return fuo
}

// ClearFighters clears all "fighters" edges to the Fighter entity.
func (fuo *FightUpdateOne) ClearFighters() *FightUpdateOne {
	fuo.mutation.ClearFighters()
	return fuo
}

// RemoveFighterIDs removes the "fighters" edge to Fighter entities by IDs.
func (fuo *FightUpdateOne) RemoveFighterIDs(ids ...int) *FightUpdateOne {
	fuo.mutation.RemoveFighterIDs(ids...)
	return fuo
}

// RemoveFighters removes "fighters" edges to Fighter entities.
func (fuo *FightUpdateOne) RemoveFighters(f ...*Fighter) *FightUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFighterIDs(ids...)
}

// ClearFighterResults clears all "fighter_results" edges to the FighterResults entity.
func (fuo *FightUpdateOne) ClearFighterResults() *FightUpdateOne {
	fuo.mutation.ClearFighterResults()
	return fuo
}

// RemoveFighterResultIDs removes the "fighter_results" edge to FighterResults entities by IDs.
func (fuo *FightUpdateOne) RemoveFighterResultIDs(ids ...int) *FightUpdateOne {
	fuo.mutation.RemoveFighterResultIDs(ids...)
	return fuo
}

// RemoveFighterResults removes "fighter_results" edges to FighterResults entities.
func (fuo *FightUpdateOne) RemoveFighterResults(f ...*FighterResults) *FightUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFighterResultIDs(ids...)
}

// Where appends a list predicates to the FightUpdate builder.
func (fuo *FightUpdateOne) Where(ps ...predicate.Fight) *FightUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FightUpdateOne) Select(field string, fields ...string) *FightUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fight entity.
func (fuo *FightUpdateOne) Save(ctx context.Context) (*Fight, error) {
	fuo.defaults()
	return withHooks[*Fight, FightMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FightUpdateOne) SaveX(ctx context.Context) *Fight {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FightUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FightUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FightUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := fight.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FightUpdateOne) check() error {
	if v, ok := fuo.mutation.UfcFightID(); ok {
		if err := fight.UfcFightIDValidator(v); err != nil {
			return &ValidationError{Name: "ufc_fight_id", err: fmt.Errorf(`ent: validator failed for field "Fight.ufc_fight_id": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.CardOrder(); ok {
		if err := fight.CardOrderValidator(v); err != nil {
			return &ValidationError{Name: "card_order", err: fmt.Errorf(`ent: validator failed for field "Fight.card_order": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.CardSegment(); ok {
		if err := fight.CardSegmentValidator(v); err != nil {
			return &ValidationError{Name: "card_segment", err: fmt.Errorf(`ent: validator failed for field "Fight.card_segment": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.ResultMethod(); ok {
		if err := fight.ResultMethodValidator(v); err != nil {
			return &ValidationError{Name: "result_method", err: fmt.Errorf(`ent: validator failed for field "Fight.result_method": %w`, err)}
		}
	}
	return nil
}

func (fuo *FightUpdateOne) sqlSave(ctx context.Context) (_node *Fight, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fight.Table, fight.Columns, sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fight.FieldID)
		for _, f := range fields {
			if !fight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UfcFightID(); ok {
		_spec.SetField(fight.FieldUfcFightID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.CardOrder(); ok {
		_spec.SetField(fight.FieldCardOrder, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedCardOrder(); ok {
		_spec.AddField(fight.FieldCardOrder, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.CardSegment(); ok {
		_spec.SetField(fight.FieldCardSegment, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ResultMethod(); ok {
		_spec.SetField(fight.FieldResultMethod, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ResultEndingRound(); ok {
		_spec.SetField(fight.FieldResultEndingRound, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedResultEndingRound(); ok {
		_spec.AddField(fight.FieldResultEndingRound, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.ResultEndingTimeSeconds(); ok {
		_spec.SetField(fight.FieldResultEndingTimeSeconds, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedResultEndingTimeSeconds(); ok {
		_spec.AddField(fight.FieldResultEndingTimeSeconds, field.TypeInt, value)
	}
	if fuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fight.EventTable,
			Columns: []string{fight.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fight.EventTable,
			Columns: []string{fight.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		createE := &FighterResultsCreate{config: fuo.config, mutation: newFighterResultsMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFightersIDs(); len(nodes) > 0 && !fuo.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fuo.config, mutation: newFighterResultsMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FightersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fight.FightersTable,
			Columns: fight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fuo.config, mutation: newFighterResultsMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFighterResultsIDs(); len(nodes) > 0 && !fuo.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FighterResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fight.FighterResultsTable,
			Columns: []string{fight.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fight{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
