// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighteralias"
	"github.com/nherson/psc/api/ent/predicate"
)

// FighterAliasUpdate is the builder for updating FighterAlias entities.
type FighterAliasUpdate struct {
	config
	hooks    []Hook
	mutation *FighterAliasMutation
}

// Where appends a list predicates to the FighterAliasUpdate builder.
func (fau *FighterAliasUpdate) Where(ps ...predicate.FighterAlias) *FighterAliasUpdate {
	fau.mutation.Where(ps...)
	return fau
}

// SetAlias sets the "alias" field.
func (fau *FighterAliasUpdate) SetAlias(s string) *FighterAliasUpdate {
	fau.mutation.SetAlias(s)
	return fau
}

// SetFighterID sets the "fighter" edge to the Fighter entity by ID.
func (fau *FighterAliasUpdate) SetFighterID(id int) *FighterAliasUpdate {
	fau.mutation.SetFighterID(id)
	return fau
}

// SetNillableFighterID sets the "fighter" edge to the Fighter entity by ID if the given value is not nil.
func (fau *FighterAliasUpdate) SetNillableFighterID(id *int) *FighterAliasUpdate {
	if id != nil {
		fau = fau.SetFighterID(*id)
	}
	return fau
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (fau *FighterAliasUpdate) SetFighter(f *Fighter) *FighterAliasUpdate {
	return fau.SetFighterID(f.ID)
}

// Mutation returns the FighterAliasMutation object of the builder.
func (fau *FighterAliasUpdate) Mutation() *FighterAliasMutation {
	return fau.mutation
}

// ClearFighter clears the "fighter" edge to the Fighter entity.
func (fau *FighterAliasUpdate) ClearFighter() *FighterAliasUpdate {
	fau.mutation.ClearFighter()
	return fau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fau *FighterAliasUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FighterAliasMutation](ctx, fau.sqlSave, fau.mutation, fau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fau *FighterAliasUpdate) SaveX(ctx context.Context) int {
	affected, err := fau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fau *FighterAliasUpdate) Exec(ctx context.Context) error {
	_, err := fau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fau *FighterAliasUpdate) ExecX(ctx context.Context) {
	if err := fau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fau *FighterAliasUpdate) check() error {
	if v, ok := fau.mutation.Alias(); ok {
		if err := fighteralias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "FighterAlias.alias": %w`, err)}
		}
	}
	return nil
}

func (fau *FighterAliasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fighteralias.Table, fighteralias.Columns, sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt))
	if ps := fau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fau.mutation.Alias(); ok {
		_spec.SetField(fighteralias.FieldAlias, field.TypeString, value)
	}
	if fau.mutation.FighterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fighteralias.FighterTable,
			Columns: []string{fighteralias.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fau.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fighteralias.FighterTable,
			Columns: []string{fighteralias.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fighteralias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fau.mutation.done = true
	return n, nil
}

// FighterAliasUpdateOne is the builder for updating a single FighterAlias entity.
type FighterAliasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FighterAliasMutation
}

// SetAlias sets the "alias" field.
func (fauo *FighterAliasUpdateOne) SetAlias(s string) *FighterAliasUpdateOne {
	fauo.mutation.SetAlias(s)
	return fauo
}

// SetFighterID sets the "fighter" edge to the Fighter entity by ID.
func (fauo *FighterAliasUpdateOne) SetFighterID(id int) *FighterAliasUpdateOne {
	fauo.mutation.SetFighterID(id)
	return fauo
}

// SetNillableFighterID sets the "fighter" edge to the Fighter entity by ID if the given value is not nil.
func (fauo *FighterAliasUpdateOne) SetNillableFighterID(id *int) *FighterAliasUpdateOne {
	if id != nil {
		fauo = fauo.SetFighterID(*id)
	}
	return fauo
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (fauo *FighterAliasUpdateOne) SetFighter(f *Fighter) *FighterAliasUpdateOne {
	return fauo.SetFighterID(f.ID)
}

// Mutation returns the FighterAliasMutation object of the builder.
func (fauo *FighterAliasUpdateOne) Mutation() *FighterAliasMutation {
	return fauo.mutation
}

// ClearFighter clears the "fighter" edge to the Fighter entity.
func (fauo *FighterAliasUpdateOne) ClearFighter() *FighterAliasUpdateOne {
	fauo.mutation.ClearFighter()
	return fauo
}

// Where appends a list predicates to the FighterAliasUpdate builder.
func (fauo *FighterAliasUpdateOne) Where(ps ...predicate.FighterAlias) *FighterAliasUpdateOne {
	fauo.mutation.Where(ps...)
	return fauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fauo *FighterAliasUpdateOne) Select(field string, fields ...string) *FighterAliasUpdateOne {
	fauo.fields = append([]string{field}, fields...)
	return fauo
}

// Save executes the query and returns the updated FighterAlias entity.
func (fauo *FighterAliasUpdateOne) Save(ctx context.Context) (*FighterAlias, error) {
	return withHooks[*FighterAlias, FighterAliasMutation](ctx, fauo.sqlSave, fauo.mutation, fauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fauo *FighterAliasUpdateOne) SaveX(ctx context.Context) *FighterAlias {
	node, err := fauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fauo *FighterAliasUpdateOne) Exec(ctx context.Context) error {
	_, err := fauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fauo *FighterAliasUpdateOne) ExecX(ctx context.Context) {
	if err := fauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fauo *FighterAliasUpdateOne) check() error {
	if v, ok := fauo.mutation.Alias(); ok {
		if err := fighteralias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "FighterAlias.alias": %w`, err)}
		}
	}
	return nil
}

func (fauo *FighterAliasUpdateOne) sqlSave(ctx context.Context) (_node *FighterAlias, err error) {
	if err := fauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fighteralias.Table, fighteralias.Columns, sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt))
	id, ok := fauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FighterAlias.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fighteralias.FieldID)
		for _, f := range fields {
			if !fighteralias.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fighteralias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fauo.mutation.Alias(); ok {
		_spec.SetField(fighteralias.FieldAlias, field.TypeString, value)
	}
	if fauo.mutation.FighterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fighteralias.FighterTable,
			Columns: []string{fighteralias.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fauo.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fighteralias.FighterTable,
			Columns: []string{fighteralias.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FighterAlias{config: fauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fighteralias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fauo.mutation.done = true
	return _node, nil
}
