// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nherson/psc/api/ent/event"
	"github.com/nherson/psc/api/ent/fight"
)

// Fight is the model entity for the Fight schema.
type Fight struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The fight identifier as assigned by UFC
	UfcFightID string `json:"ufc_fight_id,omitempty"`
	// The order in which the fight occurred in the event it took place in. 1 represents a main event, etc.
	CardOrder int `json:"card_order,omitempty"`
	// Generally, when the fight took place within the card, e.g. 'Main' or 'Prelim', etc
	CardSegment string `json:"card_segment,omitempty"`
	// How the fight ended, e.g. 'Submission' or 'Decision - Unanimous'
	ResultMethod string `json:"result_method,omitempty"`
	// The round when the fight ended; if a decision, will equal the number of rounds in the fight
	ResultEndingRound int `json:"result_ending_round,omitempty"`
	// How much time elapsed in the final round of fighting, in seconds; will be the round time if it goes to decision (i.e. 300 seconds)
	ResultEndingTimeSeconds int `json:"result_ending_time_seconds,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FightQuery when eager-loading is set.
	Edges        FightEdges `json:"edges"`
	event_fights *int
	selectValues sql.SelectValues
}

// FightEdges holds the relations/edges for other nodes in the graph.
type FightEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Fighters holds the value of the fighters edge.
	Fighters []*Fighter `json:"fighters,omitempty"`
	// FighterResults holds the value of the fighter_results edge.
	FighterResults []*FighterResults `json:"fighter_results,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FightEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// FightersOrErr returns the Fighters value or an error if the edge
// was not loaded in eager-loading.
func (e FightEdges) FightersOrErr() ([]*Fighter, error) {
	if e.loadedTypes[1] {
		return e.Fighters, nil
	}
	return nil, &NotLoadedError{edge: "fighters"}
}

// FighterResultsOrErr returns the FighterResults value or an error if the edge
// was not loaded in eager-loading.
func (e FightEdges) FighterResultsOrErr() ([]*FighterResults, error) {
	if e.loadedTypes[2] {
		return e.FighterResults, nil
	}
	return nil, &NotLoadedError{edge: "fighter_results"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fight.FieldID, fight.FieldCardOrder, fight.FieldResultEndingRound, fight.FieldResultEndingTimeSeconds:
			values[i] = new(sql.NullInt64)
		case fight.FieldUfcFightID, fight.FieldCardSegment, fight.FieldResultMethod:
			values[i] = new(sql.NullString)
		case fight.FieldCreatedAt, fight.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case fight.ForeignKeys[0]: // event_fights
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fight fields.
func (f *Fight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case fight.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case fight.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case fight.FieldUfcFightID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ufc_fight_id", values[i])
			} else if value.Valid {
				f.UfcFightID = value.String
			}
		case fight.FieldCardOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field card_order", values[i])
			} else if value.Valid {
				f.CardOrder = int(value.Int64)
			}
		case fight.FieldCardSegment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_segment", values[i])
			} else if value.Valid {
				f.CardSegment = value.String
			}
		case fight.FieldResultMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result_method", values[i])
			} else if value.Valid {
				f.ResultMethod = value.String
			}
		case fight.FieldResultEndingRound:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result_ending_round", values[i])
			} else if value.Valid {
				f.ResultEndingRound = int(value.Int64)
			}
		case fight.FieldResultEndingTimeSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result_ending_time_seconds", values[i])
			} else if value.Valid {
				f.ResultEndingTimeSeconds = int(value.Int64)
			}
		case fight.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_fights", value)
			} else if value.Valid {
				f.event_fights = new(int)
				*f.event_fights = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fight.
// This includes values selected through modifiers, order, etc.
func (f *Fight) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Fight entity.
func (f *Fight) QueryEvent() *EventQuery {
	return NewFightClient(f.config).QueryEvent(f)
}

// QueryFighters queries the "fighters" edge of the Fight entity.
func (f *Fight) QueryFighters() *FighterQuery {
	return NewFightClient(f.config).QueryFighters(f)
}

// QueryFighterResults queries the "fighter_results" edge of the Fight entity.
func (f *Fight) QueryFighterResults() *FighterResultsQuery {
	return NewFightClient(f.config).QueryFighterResults(f)
}

// Update returns a builder for updating this Fight.
// Note that you need to call Fight.Unwrap() before calling this method if this Fight
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fight) Update() *FightUpdateOne {
	return NewFightClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fight) Unwrap() *Fight {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fight is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fight) String() string {
	var builder strings.Builder
	builder.WriteString("Fight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ufc_fight_id=")
	builder.WriteString(f.UfcFightID)
	builder.WriteString(", ")
	builder.WriteString("card_order=")
	builder.WriteString(fmt.Sprintf("%v", f.CardOrder))
	builder.WriteString(", ")
	builder.WriteString("card_segment=")
	builder.WriteString(f.CardSegment)
	builder.WriteString(", ")
	builder.WriteString("result_method=")
	builder.WriteString(f.ResultMethod)
	builder.WriteString(", ")
	builder.WriteString("result_ending_round=")
	builder.WriteString(fmt.Sprintf("%v", f.ResultEndingRound))
	builder.WriteString(", ")
	builder.WriteString("result_ending_time_seconds=")
	builder.WriteString(fmt.Sprintf("%v", f.ResultEndingTimeSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// Fights is a parsable slice of Fight.
type Fights []*Fight
