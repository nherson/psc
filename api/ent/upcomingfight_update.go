// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/predicate"
	"github.com/nherson/psc/api/ent/upcomingevent"
	"github.com/nherson/psc/api/ent/upcomingfight"
	"github.com/nherson/psc/api/ent/upcomingfighterodds"
)

// UpcomingFightUpdate is the builder for updating UpcomingFight entities.
type UpcomingFightUpdate struct {
	config
	hooks    []Hook
	mutation *UpcomingFightMutation
}

// Where appends a list predicates to the UpcomingFightUpdate builder.
func (ufu *UpcomingFightUpdate) Where(ps ...predicate.UpcomingFight) *UpcomingFightUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetUpdatedAt sets the "updated_at" field.
func (ufu *UpcomingFightUpdate) SetUpdatedAt(t time.Time) *UpcomingFightUpdate {
	ufu.mutation.SetUpdatedAt(t)
	return ufu
}

// SetCardOrder sets the "card_order" field.
func (ufu *UpcomingFightUpdate) SetCardOrder(i int) *UpcomingFightUpdate {
	ufu.mutation.ResetCardOrder()
	ufu.mutation.SetCardOrder(i)
	return ufu
}

// AddCardOrder adds i to the "card_order" field.
func (ufu *UpcomingFightUpdate) AddCardOrder(i int) *UpcomingFightUpdate {
	ufu.mutation.AddCardOrder(i)
	return ufu
}

// SetUpcomingEventID sets the "upcoming_event" edge to the UpcomingEvent entity by ID.
func (ufu *UpcomingFightUpdate) SetUpcomingEventID(id int) *UpcomingFightUpdate {
	ufu.mutation.SetUpcomingEventID(id)
	return ufu
}

// SetNillableUpcomingEventID sets the "upcoming_event" edge to the UpcomingEvent entity by ID if the given value is not nil.
func (ufu *UpcomingFightUpdate) SetNillableUpcomingEventID(id *int) *UpcomingFightUpdate {
	if id != nil {
		ufu = ufu.SetUpcomingEventID(*id)
	}
	return ufu
}

// SetUpcomingEvent sets the "upcoming_event" edge to the UpcomingEvent entity.
func (ufu *UpcomingFightUpdate) SetUpcomingEvent(u *UpcomingEvent) *UpcomingFightUpdate {
	return ufu.SetUpcomingEventID(u.ID)
}

// AddFighterIDs adds the "fighters" edge to the Fighter entity by IDs.
func (ufu *UpcomingFightUpdate) AddFighterIDs(ids ...int) *UpcomingFightUpdate {
	ufu.mutation.AddFighterIDs(ids...)
	return ufu
}

// AddFighters adds the "fighters" edges to the Fighter entity.
func (ufu *UpcomingFightUpdate) AddFighters(f ...*Fighter) *UpcomingFightUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ufu.AddFighterIDs(ids...)
}

// AddUpcomingFighterOddIDs adds the "upcoming_fighter_odds" edge to the UpcomingFighterOdds entity by IDs.
func (ufu *UpcomingFightUpdate) AddUpcomingFighterOddIDs(ids ...int) *UpcomingFightUpdate {
	ufu.mutation.AddUpcomingFighterOddIDs(ids...)
	return ufu
}

// AddUpcomingFighterOdds adds the "upcoming_fighter_odds" edges to the UpcomingFighterOdds entity.
func (ufu *UpcomingFightUpdate) AddUpcomingFighterOdds(u ...*UpcomingFighterOdds) *UpcomingFightUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufu.AddUpcomingFighterOddIDs(ids...)
}

// Mutation returns the UpcomingFightMutation object of the builder.
func (ufu *UpcomingFightUpdate) Mutation() *UpcomingFightMutation {
	return ufu.mutation
}

// ClearUpcomingEvent clears the "upcoming_event" edge to the UpcomingEvent entity.
func (ufu *UpcomingFightUpdate) ClearUpcomingEvent() *UpcomingFightUpdate {
	ufu.mutation.ClearUpcomingEvent()
	return ufu
}

// ClearFighters clears all "fighters" edges to the Fighter entity.
func (ufu *UpcomingFightUpdate) ClearFighters() *UpcomingFightUpdate {
	ufu.mutation.ClearFighters()
	return ufu
}

// RemoveFighterIDs removes the "fighters" edge to Fighter entities by IDs.
func (ufu *UpcomingFightUpdate) RemoveFighterIDs(ids ...int) *UpcomingFightUpdate {
	ufu.mutation.RemoveFighterIDs(ids...)
	return ufu
}

// RemoveFighters removes "fighters" edges to Fighter entities.
func (ufu *UpcomingFightUpdate) RemoveFighters(f ...*Fighter) *UpcomingFightUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ufu.RemoveFighterIDs(ids...)
}

// ClearUpcomingFighterOdds clears all "upcoming_fighter_odds" edges to the UpcomingFighterOdds entity.
func (ufu *UpcomingFightUpdate) ClearUpcomingFighterOdds() *UpcomingFightUpdate {
	ufu.mutation.ClearUpcomingFighterOdds()
	return ufu
}

// RemoveUpcomingFighterOddIDs removes the "upcoming_fighter_odds" edge to UpcomingFighterOdds entities by IDs.
func (ufu *UpcomingFightUpdate) RemoveUpcomingFighterOddIDs(ids ...int) *UpcomingFightUpdate {
	ufu.mutation.RemoveUpcomingFighterOddIDs(ids...)
	return ufu
}

// RemoveUpcomingFighterOdds removes "upcoming_fighter_odds" edges to UpcomingFighterOdds entities.
func (ufu *UpcomingFightUpdate) RemoveUpcomingFighterOdds(u ...*UpcomingFighterOdds) *UpcomingFightUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufu.RemoveUpcomingFighterOddIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UpcomingFightUpdate) Save(ctx context.Context) (int, error) {
	ufu.defaults()
	return withHooks[int, UpcomingFightMutation](ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UpcomingFightUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UpcomingFightUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UpcomingFightUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufu *UpcomingFightUpdate) defaults() {
	if _, ok := ufu.mutation.UpdatedAt(); !ok {
		v := upcomingfight.UpdateDefaultUpdatedAt()
		ufu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufu *UpcomingFightUpdate) check() error {
	if v, ok := ufu.mutation.CardOrder(); ok {
		if err := upcomingfight.CardOrderValidator(v); err != nil {
			return &ValidationError{Name: "card_order", err: fmt.Errorf(`ent: validator failed for field "UpcomingFight.card_order": %w`, err)}
		}
	}
	return nil
}

func (ufu *UpcomingFightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ufu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(upcomingfight.Table, upcomingfight.Columns, sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.UpdatedAt(); ok {
		_spec.SetField(upcomingfight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ufu.mutation.CardOrder(); ok {
		_spec.SetField(upcomingfight.FieldCardOrder, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.AddedCardOrder(); ok {
		_spec.AddField(upcomingfight.FieldCardOrder, field.TypeInt, value)
	}
	if ufu.mutation.UpcomingEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upcomingfight.UpcomingEventTable,
			Columns: []string{upcomingfight.UpcomingEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.UpcomingEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upcomingfight.UpcomingEventTable,
			Columns: []string{upcomingfight.UpcomingEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufu.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upcomingfight.FightersTable,
			Columns: upcomingfight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		createE := &UpcomingFighterOddsCreate{config: ufu.config, mutation: newUpcomingFighterOddsMutation(ufu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedFightersIDs(); len(nodes) > 0 && !ufu.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upcomingfight.FightersTable,
			Columns: upcomingfight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UpcomingFighterOddsCreate{config: ufu.config, mutation: newUpcomingFighterOddsMutation(ufu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.FightersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upcomingfight.FightersTable,
			Columns: upcomingfight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UpcomingFighterOddsCreate{config: ufu.config, mutation: newUpcomingFighterOddsMutation(ufu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufu.mutation.UpcomingFighterOddsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upcomingfight.UpcomingFighterOddsTable,
			Columns: []string{upcomingfight.UpcomingFighterOddsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedUpcomingFighterOddsIDs(); len(nodes) > 0 && !ufu.mutation.UpcomingFighterOddsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upcomingfight.UpcomingFighterOddsTable,
			Columns: []string{upcomingfight.UpcomingFighterOddsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.UpcomingFighterOddsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upcomingfight.UpcomingFighterOddsTable,
			Columns: []string{upcomingfight.UpcomingFighterOddsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upcomingfight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UpcomingFightUpdateOne is the builder for updating a single UpcomingFight entity.
type UpcomingFightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpcomingFightMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ufuo *UpcomingFightUpdateOne) SetUpdatedAt(t time.Time) *UpcomingFightUpdateOne {
	ufuo.mutation.SetUpdatedAt(t)
	return ufuo
}

// SetCardOrder sets the "card_order" field.
func (ufuo *UpcomingFightUpdateOne) SetCardOrder(i int) *UpcomingFightUpdateOne {
	ufuo.mutation.ResetCardOrder()
	ufuo.mutation.SetCardOrder(i)
	return ufuo
}

// AddCardOrder adds i to the "card_order" field.
func (ufuo *UpcomingFightUpdateOne) AddCardOrder(i int) *UpcomingFightUpdateOne {
	ufuo.mutation.AddCardOrder(i)
	return ufuo
}

// SetUpcomingEventID sets the "upcoming_event" edge to the UpcomingEvent entity by ID.
func (ufuo *UpcomingFightUpdateOne) SetUpcomingEventID(id int) *UpcomingFightUpdateOne {
	ufuo.mutation.SetUpcomingEventID(id)
	return ufuo
}

// SetNillableUpcomingEventID sets the "upcoming_event" edge to the UpcomingEvent entity by ID if the given value is not nil.
func (ufuo *UpcomingFightUpdateOne) SetNillableUpcomingEventID(id *int) *UpcomingFightUpdateOne {
	if id != nil {
		ufuo = ufuo.SetUpcomingEventID(*id)
	}
	return ufuo
}

// SetUpcomingEvent sets the "upcoming_event" edge to the UpcomingEvent entity.
func (ufuo *UpcomingFightUpdateOne) SetUpcomingEvent(u *UpcomingEvent) *UpcomingFightUpdateOne {
	return ufuo.SetUpcomingEventID(u.ID)
}

// AddFighterIDs adds the "fighters" edge to the Fighter entity by IDs.
func (ufuo *UpcomingFightUpdateOne) AddFighterIDs(ids ...int) *UpcomingFightUpdateOne {
	ufuo.mutation.AddFighterIDs(ids...)
	return ufuo
}

// AddFighters adds the "fighters" edges to the Fighter entity.
func (ufuo *UpcomingFightUpdateOne) AddFighters(f ...*Fighter) *UpcomingFightUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ufuo.AddFighterIDs(ids...)
}

// AddUpcomingFighterOddIDs adds the "upcoming_fighter_odds" edge to the UpcomingFighterOdds entity by IDs.
func (ufuo *UpcomingFightUpdateOne) AddUpcomingFighterOddIDs(ids ...int) *UpcomingFightUpdateOne {
	ufuo.mutation.AddUpcomingFighterOddIDs(ids...)
	return ufuo
}

// AddUpcomingFighterOdds adds the "upcoming_fighter_odds" edges to the UpcomingFighterOdds entity.
func (ufuo *UpcomingFightUpdateOne) AddUpcomingFighterOdds(u ...*UpcomingFighterOdds) *UpcomingFightUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufuo.AddUpcomingFighterOddIDs(ids...)
}

// Mutation returns the UpcomingFightMutation object of the builder.
func (ufuo *UpcomingFightUpdateOne) Mutation() *UpcomingFightMutation {
	return ufuo.mutation
}

// ClearUpcomingEvent clears the "upcoming_event" edge to the UpcomingEvent entity.
func (ufuo *UpcomingFightUpdateOne) ClearUpcomingEvent() *UpcomingFightUpdateOne {
	ufuo.mutation.ClearUpcomingEvent()
	return ufuo
}

// ClearFighters clears all "fighters" edges to the Fighter entity.
func (ufuo *UpcomingFightUpdateOne) ClearFighters() *UpcomingFightUpdateOne {
	ufuo.mutation.ClearFighters()
	return ufuo
}

// RemoveFighterIDs removes the "fighters" edge to Fighter entities by IDs.
func (ufuo *UpcomingFightUpdateOne) RemoveFighterIDs(ids ...int) *UpcomingFightUpdateOne {
	ufuo.mutation.RemoveFighterIDs(ids...)
	return ufuo
}

// RemoveFighters removes "fighters" edges to Fighter entities.
func (ufuo *UpcomingFightUpdateOne) RemoveFighters(f ...*Fighter) *UpcomingFightUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ufuo.RemoveFighterIDs(ids...)
}

// ClearUpcomingFighterOdds clears all "upcoming_fighter_odds" edges to the UpcomingFighterOdds entity.
func (ufuo *UpcomingFightUpdateOne) ClearUpcomingFighterOdds() *UpcomingFightUpdateOne {
	ufuo.mutation.ClearUpcomingFighterOdds()
	return ufuo
}

// RemoveUpcomingFighterOddIDs removes the "upcoming_fighter_odds" edge to UpcomingFighterOdds entities by IDs.
func (ufuo *UpcomingFightUpdateOne) RemoveUpcomingFighterOddIDs(ids ...int) *UpcomingFightUpdateOne {
	ufuo.mutation.RemoveUpcomingFighterOddIDs(ids...)
	return ufuo
}

// RemoveUpcomingFighterOdds removes "upcoming_fighter_odds" edges to UpcomingFighterOdds entities.
func (ufuo *UpcomingFightUpdateOne) RemoveUpcomingFighterOdds(u ...*UpcomingFighterOdds) *UpcomingFightUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufuo.RemoveUpcomingFighterOddIDs(ids...)
}

// Where appends a list predicates to the UpcomingFightUpdate builder.
func (ufuo *UpcomingFightUpdateOne) Where(ps ...predicate.UpcomingFight) *UpcomingFightUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UpcomingFightUpdateOne) Select(field string, fields ...string) *UpcomingFightUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UpcomingFight entity.
func (ufuo *UpcomingFightUpdateOne) Save(ctx context.Context) (*UpcomingFight, error) {
	ufuo.defaults()
	return withHooks[*UpcomingFight, UpcomingFightMutation](ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UpcomingFightUpdateOne) SaveX(ctx context.Context) *UpcomingFight {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UpcomingFightUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UpcomingFightUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufuo *UpcomingFightUpdateOne) defaults() {
	if _, ok := ufuo.mutation.UpdatedAt(); !ok {
		v := upcomingfight.UpdateDefaultUpdatedAt()
		ufuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufuo *UpcomingFightUpdateOne) check() error {
	if v, ok := ufuo.mutation.CardOrder(); ok {
		if err := upcomingfight.CardOrderValidator(v); err != nil {
			return &ValidationError{Name: "card_order", err: fmt.Errorf(`ent: validator failed for field "UpcomingFight.card_order": %w`, err)}
		}
	}
	return nil
}

func (ufuo *UpcomingFightUpdateOne) sqlSave(ctx context.Context) (_node *UpcomingFight, err error) {
	if err := ufuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(upcomingfight.Table, upcomingfight.Columns, sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpcomingFight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upcomingfight.FieldID)
		for _, f := range fields {
			if !upcomingfight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upcomingfight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.UpdatedAt(); ok {
		_spec.SetField(upcomingfight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ufuo.mutation.CardOrder(); ok {
		_spec.SetField(upcomingfight.FieldCardOrder, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.AddedCardOrder(); ok {
		_spec.AddField(upcomingfight.FieldCardOrder, field.TypeInt, value)
	}
	if ufuo.mutation.UpcomingEventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upcomingfight.UpcomingEventTable,
			Columns: []string{upcomingfight.UpcomingEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.UpcomingEventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upcomingfight.UpcomingEventTable,
			Columns: []string{upcomingfight.UpcomingEventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufuo.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upcomingfight.FightersTable,
			Columns: upcomingfight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		createE := &UpcomingFighterOddsCreate{config: ufuo.config, mutation: newUpcomingFighterOddsMutation(ufuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedFightersIDs(); len(nodes) > 0 && !ufuo.mutation.FightersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upcomingfight.FightersTable,
			Columns: upcomingfight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UpcomingFighterOddsCreate{config: ufuo.config, mutation: newUpcomingFighterOddsMutation(ufuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.FightersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upcomingfight.FightersTable,
			Columns: upcomingfight.FightersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UpcomingFighterOddsCreate{config: ufuo.config, mutation: newUpcomingFighterOddsMutation(ufuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufuo.mutation.UpcomingFighterOddsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upcomingfight.UpcomingFighterOddsTable,
			Columns: []string{upcomingfight.UpcomingFighterOddsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedUpcomingFighterOddsIDs(); len(nodes) > 0 && !ufuo.mutation.UpcomingFighterOddsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upcomingfight.UpcomingFighterOddsTable,
			Columns: []string{upcomingfight.UpcomingFighterOddsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.UpcomingFighterOddsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upcomingfight.UpcomingFighterOddsTable,
			Columns: []string{upcomingfight.UpcomingFighterOddsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UpcomingFight{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upcomingfight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
