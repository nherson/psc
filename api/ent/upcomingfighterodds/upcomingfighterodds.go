// Code generated by ent, DO NOT EDIT.

package upcomingfighterodds

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the upcomingfighterodds type in the database.
	Label = "upcoming_fighter_odds"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFighterID holds the string denoting the fighter_id field in the database.
	FieldFighterID = "fighter_id"
	// FieldUpcomingFightID holds the string denoting the upcoming_fight_id field in the database.
	FieldUpcomingFightID = "upcoming_fight_id"
	// FieldBestOdds holds the string denoting the best_odds field in the database.
	FieldBestOdds = "best_odds"
	// FieldCorner holds the string denoting the corner field in the database.
	FieldCorner = "corner"
	// EdgeFighter holds the string denoting the fighter edge name in mutations.
	EdgeFighter = "fighter"
	// EdgeUpcomingFight holds the string denoting the upcoming_fight edge name in mutations.
	EdgeUpcomingFight = "upcoming_fight"
	// Table holds the table name of the upcomingfighterodds in the database.
	Table = "upcoming_fighter_odds"
	// FighterTable is the table that holds the fighter relation/edge.
	FighterTable = "upcoming_fighter_odds"
	// FighterInverseTable is the table name for the Fighter entity.
	// It exists in this package in order to avoid circular dependency with the "fighter" package.
	FighterInverseTable = "fighters"
	// FighterColumn is the table column denoting the fighter relation/edge.
	FighterColumn = "fighter_id"
	// UpcomingFightTable is the table that holds the upcoming_fight relation/edge.
	UpcomingFightTable = "upcoming_fighter_odds"
	// UpcomingFightInverseTable is the table name for the UpcomingFight entity.
	// It exists in this package in order to avoid circular dependency with the "upcomingfight" package.
	UpcomingFightInverseTable = "upcoming_fights"
	// UpcomingFightColumn is the table column denoting the upcoming_fight relation/edge.
	UpcomingFightColumn = "upcoming_fight_id"
)

// Columns holds all SQL columns for upcomingfighterodds fields.
var Columns = []string{
	FieldID,
	FieldFighterID,
	FieldUpcomingFightID,
	FieldBestOdds,
	FieldCorner,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Corner defines the type for the "corner" enum field.
type Corner string

// CornerRed is the default value of the Corner enum.
const DefaultCorner = CornerRed

// Corner values.
const (
	CornerRed  Corner = "red"
	CornerBlue Corner = "blue"
)

func (c Corner) String() string {
	return string(c)
}

// CornerValidator is a validator for the "corner" field enum values. It is called by the builders before save.
func CornerValidator(c Corner) error {
	switch c {
	case CornerRed, CornerBlue:
		return nil
	default:
		return fmt.Errorf("upcomingfighterodds: invalid enum value for corner field: %q", c)
	}
}

// Order defines the ordering method for the UpcomingFighterOdds queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFighterID orders the results by the fighter_id field.
func ByFighterID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFighterID, opts...).ToFunc()
}

// ByUpcomingFightID orders the results by the upcoming_fight_id field.
func ByUpcomingFightID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpcomingFightID, opts...).ToFunc()
}

// ByBestOdds orders the results by the best_odds field.
func ByBestOdds(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldBestOdds, opts...).ToFunc()
}

// ByCorner orders the results by the corner field.
func ByCorner(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCorner, opts...).ToFunc()
}

// ByFighterField orders the results by fighter field.
func ByFighterField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFighterStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpcomingFightField orders the results by upcoming_fight field.
func ByUpcomingFightField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpcomingFightStep(), sql.OrderByField(field, opts...))
	}
}
func newFighterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FighterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FighterTable, FighterColumn),
	)
}
func newUpcomingFightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpcomingFightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpcomingFightTable, UpcomingFightColumn),
	)
}
