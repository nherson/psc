// Code generated by ent, DO NOT EDIT.

package upcomingfighterodds

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nherson/psc/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldLTE(FieldID, id))
}

// FighterID applies equality check predicate on the "fighter_id" field. It's identical to FighterIDEQ.
func FighterID(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldFighterID, v))
}

// UpcomingFightID applies equality check predicate on the "upcoming_fight_id" field. It's identical to UpcomingFightIDEQ.
func UpcomingFightID(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldUpcomingFightID, v))
}

// BestOdds applies equality check predicate on the "best_odds" field. It's identical to BestOddsEQ.
func BestOdds(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldBestOdds, v))
}

// FighterIDEQ applies the EQ predicate on the "fighter_id" field.
func FighterIDEQ(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldFighterID, v))
}

// FighterIDNEQ applies the NEQ predicate on the "fighter_id" field.
func FighterIDNEQ(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNEQ(FieldFighterID, v))
}

// FighterIDIn applies the In predicate on the "fighter_id" field.
func FighterIDIn(vs ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldIn(FieldFighterID, vs...))
}

// FighterIDNotIn applies the NotIn predicate on the "fighter_id" field.
func FighterIDNotIn(vs ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNotIn(FieldFighterID, vs...))
}

// UpcomingFightIDEQ applies the EQ predicate on the "upcoming_fight_id" field.
func UpcomingFightIDEQ(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldUpcomingFightID, v))
}

// UpcomingFightIDNEQ applies the NEQ predicate on the "upcoming_fight_id" field.
func UpcomingFightIDNEQ(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNEQ(FieldUpcomingFightID, v))
}

// UpcomingFightIDIn applies the In predicate on the "upcoming_fight_id" field.
func UpcomingFightIDIn(vs ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldIn(FieldUpcomingFightID, vs...))
}

// UpcomingFightIDNotIn applies the NotIn predicate on the "upcoming_fight_id" field.
func UpcomingFightIDNotIn(vs ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNotIn(FieldUpcomingFightID, vs...))
}

// BestOddsEQ applies the EQ predicate on the "best_odds" field.
func BestOddsEQ(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldBestOdds, v))
}

// BestOddsNEQ applies the NEQ predicate on the "best_odds" field.
func BestOddsNEQ(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNEQ(FieldBestOdds, v))
}

// BestOddsIn applies the In predicate on the "best_odds" field.
func BestOddsIn(vs ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldIn(FieldBestOdds, vs...))
}

// BestOddsNotIn applies the NotIn predicate on the "best_odds" field.
func BestOddsNotIn(vs ...int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNotIn(FieldBestOdds, vs...))
}

// BestOddsGT applies the GT predicate on the "best_odds" field.
func BestOddsGT(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldGT(FieldBestOdds, v))
}

// BestOddsGTE applies the GTE predicate on the "best_odds" field.
func BestOddsGTE(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldGTE(FieldBestOdds, v))
}

// BestOddsLT applies the LT predicate on the "best_odds" field.
func BestOddsLT(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldLT(FieldBestOdds, v))
}

// BestOddsLTE applies the LTE predicate on the "best_odds" field.
func BestOddsLTE(v int) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldLTE(FieldBestOdds, v))
}

// BestOddsIsNil applies the IsNil predicate on the "best_odds" field.
func BestOddsIsNil() predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldIsNull(FieldBestOdds))
}

// BestOddsNotNil applies the NotNil predicate on the "best_odds" field.
func BestOddsNotNil() predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNotNull(FieldBestOdds))
}

// CornerEQ applies the EQ predicate on the "corner" field.
func CornerEQ(v Corner) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldEQ(FieldCorner, v))
}

// CornerNEQ applies the NEQ predicate on the "corner" field.
func CornerNEQ(v Corner) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNEQ(FieldCorner, v))
}

// CornerIn applies the In predicate on the "corner" field.
func CornerIn(vs ...Corner) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldIn(FieldCorner, vs...))
}

// CornerNotIn applies the NotIn predicate on the "corner" field.
func CornerNotIn(vs ...Corner) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(sql.FieldNotIn(FieldCorner, vs...))
}

// HasFighter applies the HasEdge predicate on the "fighter" edge.
func HasFighter() predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FighterTable, FighterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFighterWith applies the HasEdge predicate on the "fighter" edge with a given conditions (other predicates).
func HasFighterWith(preds ...predicate.Fighter) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		step := newFighterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpcomingFight applies the HasEdge predicate on the "upcoming_fight" edge.
func HasUpcomingFight() predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpcomingFightTable, UpcomingFightColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpcomingFightWith applies the HasEdge predicate on the "upcoming_fight" edge with a given conditions (other predicates).
func HasUpcomingFightWith(preds ...predicate.UpcomingFight) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		step := newUpcomingFightStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UpcomingFighterOdds) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UpcomingFighterOdds) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UpcomingFighterOdds) predicate.UpcomingFighterOdds {
	return predicate.UpcomingFighterOdds(func(s *sql.Selector) {
		p(s.Not())
	})
}
