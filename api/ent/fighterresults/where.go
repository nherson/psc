// Code generated by ent, DO NOT EDIT.

package fighterresults

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nherson/psc/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldUpdatedAt, v))
}

// FighterID applies equality check predicate on the "fighter_id" field. It's identical to FighterIDEQ.
func FighterID(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldFighterID, v))
}

// FightID applies equality check predicate on the "fight_id" field. It's identical to FightIDEQ.
func FightID(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldFightID, v))
}

// SignificantStrikesLanded applies equality check predicate on the "significant_strikes_landed" field. It's identical to SignificantStrikesLandedEQ.
func SignificantStrikesLanded(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldSignificantStrikesLanded, v))
}

// Takedowns applies equality check predicate on the "takedowns" field. It's identical to TakedownsEQ.
func Takedowns(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldTakedowns, v))
}

// Knockdowns applies equality check predicate on the "knockdowns" field. It's identical to KnockdownsEQ.
func Knockdowns(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldKnockdowns, v))
}

// ControlTimeSeconds applies equality check predicate on the "control_time_seconds" field. It's identical to ControlTimeSecondsEQ.
func ControlTimeSeconds(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldControlTimeSeconds, v))
}

// WinByStoppage applies equality check predicate on the "win_by_stoppage" field. It's identical to WinByStoppageEQ.
func WinByStoppage(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldWinByStoppage, v))
}

// LossByStoppage applies equality check predicate on the "loss_by_stoppage" field. It's identical to LossByStoppageEQ.
func LossByStoppage(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldLossByStoppage, v))
}

// MissedWeight applies equality check predicate on the "missed_weight" field. It's identical to MissedWeightEQ.
func MissedWeight(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldMissedWeight, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldUpdatedAt, v))
}

// FighterIDEQ applies the EQ predicate on the "fighter_id" field.
func FighterIDEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldFighterID, v))
}

// FighterIDNEQ applies the NEQ predicate on the "fighter_id" field.
func FighterIDNEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldFighterID, v))
}

// FighterIDIn applies the In predicate on the "fighter_id" field.
func FighterIDIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldFighterID, vs...))
}

// FighterIDNotIn applies the NotIn predicate on the "fighter_id" field.
func FighterIDNotIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldFighterID, vs...))
}

// FightIDEQ applies the EQ predicate on the "fight_id" field.
func FightIDEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldFightID, v))
}

// FightIDNEQ applies the NEQ predicate on the "fight_id" field.
func FightIDNEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldFightID, v))
}

// FightIDIn applies the In predicate on the "fight_id" field.
func FightIDIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldFightID, vs...))
}

// FightIDNotIn applies the NotIn predicate on the "fight_id" field.
func FightIDNotIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldFightID, vs...))
}

// SignificantStrikesLandedEQ applies the EQ predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldSignificantStrikesLanded, v))
}

// SignificantStrikesLandedNEQ applies the NEQ predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedNEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldSignificantStrikesLanded, v))
}

// SignificantStrikesLandedIn applies the In predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldSignificantStrikesLanded, vs...))
}

// SignificantStrikesLandedNotIn applies the NotIn predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedNotIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldSignificantStrikesLanded, vs...))
}

// SignificantStrikesLandedGT applies the GT predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedGT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldSignificantStrikesLanded, v))
}

// SignificantStrikesLandedGTE applies the GTE predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedGTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldSignificantStrikesLanded, v))
}

// SignificantStrikesLandedLT applies the LT predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedLT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldSignificantStrikesLanded, v))
}

// SignificantStrikesLandedLTE applies the LTE predicate on the "significant_strikes_landed" field.
func SignificantStrikesLandedLTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldSignificantStrikesLanded, v))
}

// TakedownsEQ applies the EQ predicate on the "takedowns" field.
func TakedownsEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldTakedowns, v))
}

// TakedownsNEQ applies the NEQ predicate on the "takedowns" field.
func TakedownsNEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldTakedowns, v))
}

// TakedownsIn applies the In predicate on the "takedowns" field.
func TakedownsIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldTakedowns, vs...))
}

// TakedownsNotIn applies the NotIn predicate on the "takedowns" field.
func TakedownsNotIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldTakedowns, vs...))
}

// TakedownsGT applies the GT predicate on the "takedowns" field.
func TakedownsGT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldTakedowns, v))
}

// TakedownsGTE applies the GTE predicate on the "takedowns" field.
func TakedownsGTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldTakedowns, v))
}

// TakedownsLT applies the LT predicate on the "takedowns" field.
func TakedownsLT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldTakedowns, v))
}

// TakedownsLTE applies the LTE predicate on the "takedowns" field.
func TakedownsLTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldTakedowns, v))
}

// KnockdownsEQ applies the EQ predicate on the "knockdowns" field.
func KnockdownsEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldKnockdowns, v))
}

// KnockdownsNEQ applies the NEQ predicate on the "knockdowns" field.
func KnockdownsNEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldKnockdowns, v))
}

// KnockdownsIn applies the In predicate on the "knockdowns" field.
func KnockdownsIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldKnockdowns, vs...))
}

// KnockdownsNotIn applies the NotIn predicate on the "knockdowns" field.
func KnockdownsNotIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldKnockdowns, vs...))
}

// KnockdownsGT applies the GT predicate on the "knockdowns" field.
func KnockdownsGT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldKnockdowns, v))
}

// KnockdownsGTE applies the GTE predicate on the "knockdowns" field.
func KnockdownsGTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldKnockdowns, v))
}

// KnockdownsLT applies the LT predicate on the "knockdowns" field.
func KnockdownsLT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldKnockdowns, v))
}

// KnockdownsLTE applies the LTE predicate on the "knockdowns" field.
func KnockdownsLTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldKnockdowns, v))
}

// ControlTimeSecondsEQ applies the EQ predicate on the "control_time_seconds" field.
func ControlTimeSecondsEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldControlTimeSeconds, v))
}

// ControlTimeSecondsNEQ applies the NEQ predicate on the "control_time_seconds" field.
func ControlTimeSecondsNEQ(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldControlTimeSeconds, v))
}

// ControlTimeSecondsIn applies the In predicate on the "control_time_seconds" field.
func ControlTimeSecondsIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIn(FieldControlTimeSeconds, vs...))
}

// ControlTimeSecondsNotIn applies the NotIn predicate on the "control_time_seconds" field.
func ControlTimeSecondsNotIn(vs ...int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotIn(FieldControlTimeSeconds, vs...))
}

// ControlTimeSecondsGT applies the GT predicate on the "control_time_seconds" field.
func ControlTimeSecondsGT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGT(FieldControlTimeSeconds, v))
}

// ControlTimeSecondsGTE applies the GTE predicate on the "control_time_seconds" field.
func ControlTimeSecondsGTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldGTE(FieldControlTimeSeconds, v))
}

// ControlTimeSecondsLT applies the LT predicate on the "control_time_seconds" field.
func ControlTimeSecondsLT(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLT(FieldControlTimeSeconds, v))
}

// ControlTimeSecondsLTE applies the LTE predicate on the "control_time_seconds" field.
func ControlTimeSecondsLTE(v int) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldLTE(FieldControlTimeSeconds, v))
}

// WinByStoppageEQ applies the EQ predicate on the "win_by_stoppage" field.
func WinByStoppageEQ(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldWinByStoppage, v))
}

// WinByStoppageNEQ applies the NEQ predicate on the "win_by_stoppage" field.
func WinByStoppageNEQ(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldWinByStoppage, v))
}

// LossByStoppageEQ applies the EQ predicate on the "loss_by_stoppage" field.
func LossByStoppageEQ(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldLossByStoppage, v))
}

// LossByStoppageNEQ applies the NEQ predicate on the "loss_by_stoppage" field.
func LossByStoppageNEQ(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldLossByStoppage, v))
}

// MissedWeightEQ applies the EQ predicate on the "missed_weight" field.
func MissedWeightEQ(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldEQ(FieldMissedWeight, v))
}

// MissedWeightNEQ applies the NEQ predicate on the "missed_weight" field.
func MissedWeightNEQ(v bool) predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNEQ(FieldMissedWeight, v))
}

// MissedWeightIsNil applies the IsNil predicate on the "missed_weight" field.
func MissedWeightIsNil() predicate.FighterResults {
	return predicate.FighterResults(sql.FieldIsNull(FieldMissedWeight))
}

// MissedWeightNotNil applies the NotNil predicate on the "missed_weight" field.
func MissedWeightNotNil() predicate.FighterResults {
	return predicate.FighterResults(sql.FieldNotNull(FieldMissedWeight))
}

// HasFighter applies the HasEdge predicate on the "fighter" edge.
func HasFighter() predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FighterTable, FighterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFighterWith applies the HasEdge predicate on the "fighter" edge with a given conditions (other predicates).
func HasFighterWith(preds ...predicate.Fighter) predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		step := newFighterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFight applies the HasEdge predicate on the "fight" edge.
func HasFight() predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FightTable, FightColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFightWith applies the HasEdge predicate on the "fight" edge with a given conditions (other predicates).
func HasFightWith(preds ...predicate.Fight) predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		step := newFightStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FighterResults) predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FighterResults) predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FighterResults) predicate.FighterResults {
	return predicate.FighterResults(func(s *sql.Selector) {
		p(s.Not())
	})
}
