// Code generated by ent, DO NOT EDIT.

package fighterresults

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fighterresults type in the database.
	Label = "fighter_results"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFighterID holds the string denoting the fighter_id field in the database.
	FieldFighterID = "fighter_id"
	// FieldFightID holds the string denoting the fight_id field in the database.
	FieldFightID = "fight_id"
	// FieldSignificantStrikesLanded holds the string denoting the significant_strikes_landed field in the database.
	FieldSignificantStrikesLanded = "significant_strikes_landed"
	// FieldTakedowns holds the string denoting the takedowns field in the database.
	FieldTakedowns = "takedowns"
	// FieldKnockdowns holds the string denoting the knockdowns field in the database.
	FieldKnockdowns = "knockdowns"
	// FieldControlTimeSeconds holds the string denoting the control_time_seconds field in the database.
	FieldControlTimeSeconds = "control_time_seconds"
	// FieldWinByStoppage holds the string denoting the win_by_stoppage field in the database.
	FieldWinByStoppage = "win_by_stoppage"
	// FieldLossByStoppage holds the string denoting the loss_by_stoppage field in the database.
	FieldLossByStoppage = "loss_by_stoppage"
	// FieldMissedWeight holds the string denoting the missed_weight field in the database.
	FieldMissedWeight = "missed_weight"
	// EdgeFighter holds the string denoting the fighter edge name in mutations.
	EdgeFighter = "fighter"
	// EdgeFight holds the string denoting the fight edge name in mutations.
	EdgeFight = "fight"
	// Table holds the table name of the fighterresults in the database.
	Table = "fighter_results"
	// FighterTable is the table that holds the fighter relation/edge.
	FighterTable = "fighter_results"
	// FighterInverseTable is the table name for the Fighter entity.
	// It exists in this package in order to avoid circular dependency with the "fighter" package.
	FighterInverseTable = "fighters"
	// FighterColumn is the table column denoting the fighter relation/edge.
	FighterColumn = "fighter_id"
	// FightTable is the table that holds the fight relation/edge.
	FightTable = "fighter_results"
	// FightInverseTable is the table name for the Fight entity.
	// It exists in this package in order to avoid circular dependency with the "fight" package.
	FightInverseTable = "fights"
	// FightColumn is the table column denoting the fight relation/edge.
	FightColumn = "fight_id"
)

// Columns holds all SQL columns for fighterresults fields.
var Columns = []string{
	FieldID,
	FieldFighterID,
	FieldFightID,
	FieldSignificantStrikesLanded,
	FieldTakedowns,
	FieldKnockdowns,
	FieldControlTimeSeconds,
	FieldWinByStoppage,
	FieldLossByStoppage,
	FieldMissedWeight,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the FighterResults queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFighterID orders the results by the fighter_id field.
func ByFighterID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFighterID, opts...).ToFunc()
}

// ByFightID orders the results by the fight_id field.
func ByFightID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFightID, opts...).ToFunc()
}

// BySignificantStrikesLanded orders the results by the significant_strikes_landed field.
func BySignificantStrikesLanded(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSignificantStrikesLanded, opts...).ToFunc()
}

// ByTakedowns orders the results by the takedowns field.
func ByTakedowns(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTakedowns, opts...).ToFunc()
}

// ByKnockdowns orders the results by the knockdowns field.
func ByKnockdowns(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldKnockdowns, opts...).ToFunc()
}

// ByControlTimeSeconds orders the results by the control_time_seconds field.
func ByControlTimeSeconds(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldControlTimeSeconds, opts...).ToFunc()
}

// ByWinByStoppage orders the results by the win_by_stoppage field.
func ByWinByStoppage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldWinByStoppage, opts...).ToFunc()
}

// ByLossByStoppage orders the results by the loss_by_stoppage field.
func ByLossByStoppage(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLossByStoppage, opts...).ToFunc()
}

// ByMissedWeight orders the results by the missed_weight field.
func ByMissedWeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMissedWeight, opts...).ToFunc()
}

// ByFighterField orders the results by fighter field.
func ByFighterField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFighterStep(), sql.OrderByField(field, opts...))
	}
}

// ByFightField orders the results by fight field.
func ByFightField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFightStep(), sql.OrderByField(field, opts...))
	}
}
func newFighterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FighterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FighterTable, FighterColumn),
	)
}
func newFightStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FightInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FightTable, FightColumn),
	)
}
