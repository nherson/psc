// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/upcomingfight"
	"github.com/nherson/psc/api/ent/upcomingfighterodds"
)

// UpcomingFighterOdds is the model entity for the UpcomingFighterOdds schema.
type UpcomingFighterOdds struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Required for M2M relationship between UpcomingFights and Fighters. NOT tapology assigned identifier!
	FighterID int `json:"fighter_id,omitempty"`
	// Required for M2M relationship between UpcomingFights and Fighters. NOT tapology assigned identifier!
	UpcomingFightID int `json:"upcoming_fight_id,omitempty"`
	// BestOdds holds the value of the "best_odds" field.
	BestOdds *int `json:"best_odds,omitempty"`
	// Corner holds the value of the "corner" field.
	Corner upcomingfighterodds.Corner `json:"corner,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UpcomingFighterOddsQuery when eager-loading is set.
	Edges        UpcomingFighterOddsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UpcomingFighterOddsEdges holds the relations/edges for other nodes in the graph.
type UpcomingFighterOddsEdges struct {
	// Fighter holds the value of the fighter edge.
	Fighter *Fighter `json:"fighter,omitempty"`
	// UpcomingFight holds the value of the upcoming_fight edge.
	UpcomingFight *UpcomingFight `json:"upcoming_fight,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FighterOrErr returns the Fighter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpcomingFighterOddsEdges) FighterOrErr() (*Fighter, error) {
	if e.loadedTypes[0] {
		if e.Fighter == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fighter.Label}
		}
		return e.Fighter, nil
	}
	return nil, &NotLoadedError{edge: "fighter"}
}

// UpcomingFightOrErr returns the UpcomingFight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpcomingFighterOddsEdges) UpcomingFightOrErr() (*UpcomingFight, error) {
	if e.loadedTypes[1] {
		if e.UpcomingFight == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: upcomingfight.Label}
		}
		return e.UpcomingFight, nil
	}
	return nil, &NotLoadedError{edge: "upcoming_fight"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpcomingFighterOdds) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upcomingfighterodds.FieldID, upcomingfighterodds.FieldFighterID, upcomingfighterodds.FieldUpcomingFightID, upcomingfighterodds.FieldBestOdds:
			values[i] = new(sql.NullInt64)
		case upcomingfighterodds.FieldCorner:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpcomingFighterOdds fields.
func (ufo *UpcomingFighterOdds) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upcomingfighterodds.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ufo.ID = int(value.Int64)
		case upcomingfighterodds.FieldFighterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fighter_id", values[i])
			} else if value.Valid {
				ufo.FighterID = int(value.Int64)
			}
		case upcomingfighterodds.FieldUpcomingFightID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field upcoming_fight_id", values[i])
			} else if value.Valid {
				ufo.UpcomingFightID = int(value.Int64)
			}
		case upcomingfighterodds.FieldBestOdds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field best_odds", values[i])
			} else if value.Valid {
				ufo.BestOdds = new(int)
				*ufo.BestOdds = int(value.Int64)
			}
		case upcomingfighterodds.FieldCorner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field corner", values[i])
			} else if value.Valid {
				ufo.Corner = upcomingfighterodds.Corner(value.String)
			}
		default:
			ufo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpcomingFighterOdds.
// This includes values selected through modifiers, order, etc.
func (ufo *UpcomingFighterOdds) Value(name string) (ent.Value, error) {
	return ufo.selectValues.Get(name)
}

// QueryFighter queries the "fighter" edge of the UpcomingFighterOdds entity.
func (ufo *UpcomingFighterOdds) QueryFighter() *FighterQuery {
	return NewUpcomingFighterOddsClient(ufo.config).QueryFighter(ufo)
}

// QueryUpcomingFight queries the "upcoming_fight" edge of the UpcomingFighterOdds entity.
func (ufo *UpcomingFighterOdds) QueryUpcomingFight() *UpcomingFightQuery {
	return NewUpcomingFighterOddsClient(ufo.config).QueryUpcomingFight(ufo)
}

// Update returns a builder for updating this UpcomingFighterOdds.
// Note that you need to call UpcomingFighterOdds.Unwrap() before calling this method if this UpcomingFighterOdds
// was returned from a transaction, and the transaction was committed or rolled back.
func (ufo *UpcomingFighterOdds) Update() *UpcomingFighterOddsUpdateOne {
	return NewUpcomingFighterOddsClient(ufo.config).UpdateOne(ufo)
}

// Unwrap unwraps the UpcomingFighterOdds entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ufo *UpcomingFighterOdds) Unwrap() *UpcomingFighterOdds {
	_tx, ok := ufo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpcomingFighterOdds is not a transactional entity")
	}
	ufo.config.driver = _tx.drv
	return ufo
}

// String implements the fmt.Stringer.
func (ufo *UpcomingFighterOdds) String() string {
	var builder strings.Builder
	builder.WriteString("UpcomingFighterOdds(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ufo.ID))
	builder.WriteString("fighter_id=")
	builder.WriteString(fmt.Sprintf("%v", ufo.FighterID))
	builder.WriteString(", ")
	builder.WriteString("upcoming_fight_id=")
	builder.WriteString(fmt.Sprintf("%v", ufo.UpcomingFightID))
	builder.WriteString(", ")
	if v := ufo.BestOdds; v != nil {
		builder.WriteString("best_odds=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("corner=")
	builder.WriteString(fmt.Sprintf("%v", ufo.Corner))
	builder.WriteByte(')')
	return builder.String()
}

// UpcomingFighterOddsSlice is a parsable slice of UpcomingFighterOdds.
type UpcomingFighterOddsSlice []*UpcomingFighterOdds
