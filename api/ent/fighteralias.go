// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighteralias"
)

// FighterAlias is the model entity for the FighterAlias schema.
type FighterAlias struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// This is some other name a fighter may be known by. No promises about how entries are cased, so program defensively!
	Alias string `json:"alias,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FighterAliasQuery when eager-loading is set.
	Edges                   FighterAliasEdges `json:"edges"`
	fighter_fighter_aliases *int
	selectValues            sql.SelectValues
}

// FighterAliasEdges holds the relations/edges for other nodes in the graph.
type FighterAliasEdges struct {
	// Fighter holds the value of the fighter edge.
	Fighter *Fighter `json:"fighter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FighterOrErr returns the Fighter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FighterAliasEdges) FighterOrErr() (*Fighter, error) {
	if e.loadedTypes[0] {
		if e.Fighter == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fighter.Label}
		}
		return e.Fighter, nil
	}
	return nil, &NotLoadedError{edge: "fighter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FighterAlias) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fighteralias.FieldID:
			values[i] = new(sql.NullInt64)
		case fighteralias.FieldAlias:
			values[i] = new(sql.NullString)
		case fighteralias.ForeignKeys[0]: // fighter_fighter_aliases
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FighterAlias fields.
func (fa *FighterAlias) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fighteralias.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fa.ID = int(value.Int64)
		case fighteralias.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				fa.Alias = value.String
			}
		case fighteralias.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field fighter_fighter_aliases", value)
			} else if value.Valid {
				fa.fighter_fighter_aliases = new(int)
				*fa.fighter_fighter_aliases = int(value.Int64)
			}
		default:
			fa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FighterAlias.
// This includes values selected through modifiers, order, etc.
func (fa *FighterAlias) Value(name string) (ent.Value, error) {
	return fa.selectValues.Get(name)
}

// QueryFighter queries the "fighter" edge of the FighterAlias entity.
func (fa *FighterAlias) QueryFighter() *FighterQuery {
	return NewFighterAliasClient(fa.config).QueryFighter(fa)
}

// Update returns a builder for updating this FighterAlias.
// Note that you need to call FighterAlias.Unwrap() before calling this method if this FighterAlias
// was returned from a transaction, and the transaction was committed or rolled back.
func (fa *FighterAlias) Update() *FighterAliasUpdateOne {
	return NewFighterAliasClient(fa.config).UpdateOne(fa)
}

// Unwrap unwraps the FighterAlias entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fa *FighterAlias) Unwrap() *FighterAlias {
	_tx, ok := fa.config.driver.(*txDriver)
	if !ok {
		panic("ent: FighterAlias is not a transactional entity")
	}
	fa.config.driver = _tx.drv
	return fa
}

// String implements the fmt.Stringer.
func (fa *FighterAlias) String() string {
	var builder strings.Builder
	builder.WriteString("FighterAlias(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fa.ID))
	builder.WriteString("alias=")
	builder.WriteString(fa.Alias)
	builder.WriteByte(')')
	return builder.String()
}

// FighterAliasSlice is a parsable slice of FighterAlias.
type FighterAliasSlice []*FighterAlias
