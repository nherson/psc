// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fight"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighteralias"
	"github.com/nherson/psc/api/ent/fighterresults"
	"github.com/nherson/psc/api/ent/predicate"
)

// FighterUpdate is the builder for updating Fighter entities.
type FighterUpdate struct {
	config
	hooks    []Hook
	mutation *FighterMutation
}

// Where appends a list predicates to the FighterUpdate builder.
func (fu *FighterUpdate) Where(ps ...predicate.Fighter) *FighterUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FighterUpdate) SetUpdatedAt(t time.Time) *FighterUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetUfcFighterID sets the "ufc_fighter_id" field.
func (fu *FighterUpdate) SetUfcFighterID(s string) *FighterUpdate {
	fu.mutation.SetUfcFighterID(s)
	return fu
}

// SetMmaID sets the "mma_id" field.
func (fu *FighterUpdate) SetMmaID(i int) *FighterUpdate {
	fu.mutation.ResetMmaID()
	fu.mutation.SetMmaID(i)
	return fu
}

// AddMmaID adds i to the "mma_id" field.
func (fu *FighterUpdate) AddMmaID(i int) *FighterUpdate {
	fu.mutation.AddMmaID(i)
	return fu
}

// SetFirstName sets the "first_name" field.
func (fu *FighterUpdate) SetFirstName(s string) *FighterUpdate {
	fu.mutation.SetFirstName(s)
	return fu
}

// SetLastName sets the "last_name" field.
func (fu *FighterUpdate) SetLastName(s string) *FighterUpdate {
	fu.mutation.SetLastName(s)
	return fu
}

// SetNickName sets the "nick_name" field.
func (fu *FighterUpdate) SetNickName(s string) *FighterUpdate {
	fu.mutation.SetNickName(s)
	return fu
}

// SetFightinsiderID sets the "fightinsider_id" field.
func (fu *FighterUpdate) SetFightinsiderID(s string) *FighterUpdate {
	fu.mutation.SetFightinsiderID(s)
	return fu
}

// SetNillableFightinsiderID sets the "fightinsider_id" field if the given value is not nil.
func (fu *FighterUpdate) SetNillableFightinsiderID(s *string) *FighterUpdate {
	if s != nil {
		fu.SetFightinsiderID(*s)
	}
	return fu
}

// ClearFightinsiderID clears the value of the "fightinsider_id" field.
func (fu *FighterUpdate) ClearFightinsiderID() *FighterUpdate {
	fu.mutation.ClearFightinsiderID()
	return fu
}

// SetTapologyID sets the "tapology_id" field.
func (fu *FighterUpdate) SetTapologyID(s string) *FighterUpdate {
	fu.mutation.SetTapologyID(s)
	return fu
}

// SetNillableTapologyID sets the "tapology_id" field if the given value is not nil.
func (fu *FighterUpdate) SetNillableTapologyID(s *string) *FighterUpdate {
	if s != nil {
		fu.SetTapologyID(*s)
	}
	return fu
}

// ClearTapologyID clears the value of the "tapology_id" field.
func (fu *FighterUpdate) ClearTapologyID() *FighterUpdate {
	fu.mutation.ClearTapologyID()
	return fu
}

// AddFightIDs adds the "fights" edge to the Fight entity by IDs.
func (fu *FighterUpdate) AddFightIDs(ids ...int) *FighterUpdate {
	fu.mutation.AddFightIDs(ids...)
	return fu
}

// AddFights adds the "fights" edges to the Fight entity.
func (fu *FighterUpdate) AddFights(f ...*Fight) *FighterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFightIDs(ids...)
}

// AddFighterAliasIDs adds the "fighter_aliases" edge to the FighterAlias entity by IDs.
func (fu *FighterUpdate) AddFighterAliasIDs(ids ...int) *FighterUpdate {
	fu.mutation.AddFighterAliasIDs(ids...)
	return fu
}

// AddFighterAliases adds the "fighter_aliases" edges to the FighterAlias entity.
func (fu *FighterUpdate) AddFighterAliases(f ...*FighterAlias) *FighterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFighterAliasIDs(ids...)
}

// AddFighterResultIDs adds the "fighter_results" edge to the FighterResults entity by IDs.
func (fu *FighterUpdate) AddFighterResultIDs(ids ...int) *FighterUpdate {
	fu.mutation.AddFighterResultIDs(ids...)
	return fu
}

// AddFighterResults adds the "fighter_results" edges to the FighterResults entity.
func (fu *FighterUpdate) AddFighterResults(f ...*FighterResults) *FighterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddFighterResultIDs(ids...)
}

// Mutation returns the FighterMutation object of the builder.
func (fu *FighterUpdate) Mutation() *FighterMutation {
	return fu.mutation
}

// ClearFights clears all "fights" edges to the Fight entity.
func (fu *FighterUpdate) ClearFights() *FighterUpdate {
	fu.mutation.ClearFights()
	return fu
}

// RemoveFightIDs removes the "fights" edge to Fight entities by IDs.
func (fu *FighterUpdate) RemoveFightIDs(ids ...int) *FighterUpdate {
	fu.mutation.RemoveFightIDs(ids...)
	return fu
}

// RemoveFights removes "fights" edges to Fight entities.
func (fu *FighterUpdate) RemoveFights(f ...*Fight) *FighterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFightIDs(ids...)
}

// ClearFighterAliases clears all "fighter_aliases" edges to the FighterAlias entity.
func (fu *FighterUpdate) ClearFighterAliases() *FighterUpdate {
	fu.mutation.ClearFighterAliases()
	return fu
}

// RemoveFighterAliasIDs removes the "fighter_aliases" edge to FighterAlias entities by IDs.
func (fu *FighterUpdate) RemoveFighterAliasIDs(ids ...int) *FighterUpdate {
	fu.mutation.RemoveFighterAliasIDs(ids...)
	return fu
}

// RemoveFighterAliases removes "fighter_aliases" edges to FighterAlias entities.
func (fu *FighterUpdate) RemoveFighterAliases(f ...*FighterAlias) *FighterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFighterAliasIDs(ids...)
}

// ClearFighterResults clears all "fighter_results" edges to the FighterResults entity.
func (fu *FighterUpdate) ClearFighterResults() *FighterUpdate {
	fu.mutation.ClearFighterResults()
	return fu
}

// RemoveFighterResultIDs removes the "fighter_results" edge to FighterResults entities by IDs.
func (fu *FighterUpdate) RemoveFighterResultIDs(ids ...int) *FighterUpdate {
	fu.mutation.RemoveFighterResultIDs(ids...)
	return fu
}

// RemoveFighterResults removes "fighter_results" edges to FighterResults entities.
func (fu *FighterUpdate) RemoveFighterResults(f ...*FighterResults) *FighterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveFighterResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FighterUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks[int, FighterMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FighterUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FighterUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FighterUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FighterUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := fighter.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FighterUpdate) check() error {
	if v, ok := fu.mutation.UfcFighterID(); ok {
		if err := fighter.UfcFighterIDValidator(v); err != nil {
			return &ValidationError{Name: "ufc_fighter_id", err: fmt.Errorf(`ent: validator failed for field "Fighter.ufc_fighter_id": %w`, err)}
		}
	}
	return nil
}

func (fu *FighterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fighter.Table, fighter.Columns, sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(fighter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UfcFighterID(); ok {
		_spec.SetField(fighter.FieldUfcFighterID, field.TypeString, value)
	}
	if value, ok := fu.mutation.MmaID(); ok {
		_spec.SetField(fighter.FieldMmaID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedMmaID(); ok {
		_spec.AddField(fighter.FieldMmaID, field.TypeInt, value)
	}
	if value, ok := fu.mutation.FirstName(); ok {
		_spec.SetField(fighter.FieldFirstName, field.TypeString, value)
	}
	if value, ok := fu.mutation.LastName(); ok {
		_spec.SetField(fighter.FieldLastName, field.TypeString, value)
	}
	if value, ok := fu.mutation.NickName(); ok {
		_spec.SetField(fighter.FieldNickName, field.TypeString, value)
	}
	if value, ok := fu.mutation.FightinsiderID(); ok {
		_spec.SetField(fighter.FieldFightinsiderID, field.TypeString, value)
	}
	if fu.mutation.FightinsiderIDCleared() {
		_spec.ClearField(fighter.FieldFightinsiderID, field.TypeString)
	}
	if value, ok := fu.mutation.TapologyID(); ok {
		_spec.SetField(fighter.FieldTapologyID, field.TypeString, value)
	}
	if fu.mutation.TapologyIDCleared() {
		_spec.ClearField(fighter.FieldTapologyID, field.TypeString)
	}
	if fu.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   fighter.FightsTable,
			Columns: fighter.FightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		createE := &FighterResultsCreate{config: fu.config, mutation: newFighterResultsMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFightsIDs(); len(nodes) > 0 && !fu.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   fighter.FightsTable,
			Columns: fighter.FightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fu.config, mutation: newFighterResultsMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   fighter.FightsTable,
			Columns: fighter.FightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fu.config, mutation: newFighterResultsMutation(fu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FighterAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fighter.FighterAliasesTable,
			Columns: []string{fighter.FighterAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFighterAliasesIDs(); len(nodes) > 0 && !fu.mutation.FighterAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fighter.FighterAliasesTable,
			Columns: []string{fighter.FighterAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FighterAliasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fighter.FighterAliasesTable,
			Columns: []string{fighter.FighterAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fighter.FighterResultsTable,
			Columns: []string{fighter.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFighterResultsIDs(); len(nodes) > 0 && !fu.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fighter.FighterResultsTable,
			Columns: []string{fighter.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FighterResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fighter.FighterResultsTable,
			Columns: []string{fighter.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fighter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FighterUpdateOne is the builder for updating a single Fighter entity.
type FighterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FighterMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FighterUpdateOne) SetUpdatedAt(t time.Time) *FighterUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetUfcFighterID sets the "ufc_fighter_id" field.
func (fuo *FighterUpdateOne) SetUfcFighterID(s string) *FighterUpdateOne {
	fuo.mutation.SetUfcFighterID(s)
	return fuo
}

// SetMmaID sets the "mma_id" field.
func (fuo *FighterUpdateOne) SetMmaID(i int) *FighterUpdateOne {
	fuo.mutation.ResetMmaID()
	fuo.mutation.SetMmaID(i)
	return fuo
}

// AddMmaID adds i to the "mma_id" field.
func (fuo *FighterUpdateOne) AddMmaID(i int) *FighterUpdateOne {
	fuo.mutation.AddMmaID(i)
	return fuo
}

// SetFirstName sets the "first_name" field.
func (fuo *FighterUpdateOne) SetFirstName(s string) *FighterUpdateOne {
	fuo.mutation.SetFirstName(s)
	return fuo
}

// SetLastName sets the "last_name" field.
func (fuo *FighterUpdateOne) SetLastName(s string) *FighterUpdateOne {
	fuo.mutation.SetLastName(s)
	return fuo
}

// SetNickName sets the "nick_name" field.
func (fuo *FighterUpdateOne) SetNickName(s string) *FighterUpdateOne {
	fuo.mutation.SetNickName(s)
	return fuo
}

// SetFightinsiderID sets the "fightinsider_id" field.
func (fuo *FighterUpdateOne) SetFightinsiderID(s string) *FighterUpdateOne {
	fuo.mutation.SetFightinsiderID(s)
	return fuo
}

// SetNillableFightinsiderID sets the "fightinsider_id" field if the given value is not nil.
func (fuo *FighterUpdateOne) SetNillableFightinsiderID(s *string) *FighterUpdateOne {
	if s != nil {
		fuo.SetFightinsiderID(*s)
	}
	return fuo
}

// ClearFightinsiderID clears the value of the "fightinsider_id" field.
func (fuo *FighterUpdateOne) ClearFightinsiderID() *FighterUpdateOne {
	fuo.mutation.ClearFightinsiderID()
	return fuo
}

// SetTapologyID sets the "tapology_id" field.
func (fuo *FighterUpdateOne) SetTapologyID(s string) *FighterUpdateOne {
	fuo.mutation.SetTapologyID(s)
	return fuo
}

// SetNillableTapologyID sets the "tapology_id" field if the given value is not nil.
func (fuo *FighterUpdateOne) SetNillableTapologyID(s *string) *FighterUpdateOne {
	if s != nil {
		fuo.SetTapologyID(*s)
	}
	return fuo
}

// ClearTapologyID clears the value of the "tapology_id" field.
func (fuo *FighterUpdateOne) ClearTapologyID() *FighterUpdateOne {
	fuo.mutation.ClearTapologyID()
	return fuo
}

// AddFightIDs adds the "fights" edge to the Fight entity by IDs.
func (fuo *FighterUpdateOne) AddFightIDs(ids ...int) *FighterUpdateOne {
	fuo.mutation.AddFightIDs(ids...)
	return fuo
}

// AddFights adds the "fights" edges to the Fight entity.
func (fuo *FighterUpdateOne) AddFights(f ...*Fight) *FighterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFightIDs(ids...)
}

// AddFighterAliasIDs adds the "fighter_aliases" edge to the FighterAlias entity by IDs.
func (fuo *FighterUpdateOne) AddFighterAliasIDs(ids ...int) *FighterUpdateOne {
	fuo.mutation.AddFighterAliasIDs(ids...)
	return fuo
}

// AddFighterAliases adds the "fighter_aliases" edges to the FighterAlias entity.
func (fuo *FighterUpdateOne) AddFighterAliases(f ...*FighterAlias) *FighterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFighterAliasIDs(ids...)
}

// AddFighterResultIDs adds the "fighter_results" edge to the FighterResults entity by IDs.
func (fuo *FighterUpdateOne) AddFighterResultIDs(ids ...int) *FighterUpdateOne {
	fuo.mutation.AddFighterResultIDs(ids...)
	return fuo
}

// AddFighterResults adds the "fighter_results" edges to the FighterResults entity.
func (fuo *FighterUpdateOne) AddFighterResults(f ...*FighterResults) *FighterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddFighterResultIDs(ids...)
}

// Mutation returns the FighterMutation object of the builder.
func (fuo *FighterUpdateOne) Mutation() *FighterMutation {
	return fuo.mutation
}

// ClearFights clears all "fights" edges to the Fight entity.
func (fuo *FighterUpdateOne) ClearFights() *FighterUpdateOne {
	fuo.mutation.ClearFights()
	return fuo
}

// RemoveFightIDs removes the "fights" edge to Fight entities by IDs.
func (fuo *FighterUpdateOne) RemoveFightIDs(ids ...int) *FighterUpdateOne {
	fuo.mutation.RemoveFightIDs(ids...)
	return fuo
}

// RemoveFights removes "fights" edges to Fight entities.
func (fuo *FighterUpdateOne) RemoveFights(f ...*Fight) *FighterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFightIDs(ids...)
}

// ClearFighterAliases clears all "fighter_aliases" edges to the FighterAlias entity.
func (fuo *FighterUpdateOne) ClearFighterAliases() *FighterUpdateOne {
	fuo.mutation.ClearFighterAliases()
	return fuo
}

// RemoveFighterAliasIDs removes the "fighter_aliases" edge to FighterAlias entities by IDs.
func (fuo *FighterUpdateOne) RemoveFighterAliasIDs(ids ...int) *FighterUpdateOne {
	fuo.mutation.RemoveFighterAliasIDs(ids...)
	return fuo
}

// RemoveFighterAliases removes "fighter_aliases" edges to FighterAlias entities.
func (fuo *FighterUpdateOne) RemoveFighterAliases(f ...*FighterAlias) *FighterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFighterAliasIDs(ids...)
}

// ClearFighterResults clears all "fighter_results" edges to the FighterResults entity.
func (fuo *FighterUpdateOne) ClearFighterResults() *FighterUpdateOne {
	fuo.mutation.ClearFighterResults()
	return fuo
}

// RemoveFighterResultIDs removes the "fighter_results" edge to FighterResults entities by IDs.
func (fuo *FighterUpdateOne) RemoveFighterResultIDs(ids ...int) *FighterUpdateOne {
	fuo.mutation.RemoveFighterResultIDs(ids...)
	return fuo
}

// RemoveFighterResults removes "fighter_results" edges to FighterResults entities.
func (fuo *FighterUpdateOne) RemoveFighterResults(f ...*FighterResults) *FighterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveFighterResultIDs(ids...)
}

// Where appends a list predicates to the FighterUpdate builder.
func (fuo *FighterUpdateOne) Where(ps ...predicate.Fighter) *FighterUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FighterUpdateOne) Select(field string, fields ...string) *FighterUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fighter entity.
func (fuo *FighterUpdateOne) Save(ctx context.Context) (*Fighter, error) {
	fuo.defaults()
	return withHooks[*Fighter, FighterMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FighterUpdateOne) SaveX(ctx context.Context) *Fighter {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FighterUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FighterUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FighterUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := fighter.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FighterUpdateOne) check() error {
	if v, ok := fuo.mutation.UfcFighterID(); ok {
		if err := fighter.UfcFighterIDValidator(v); err != nil {
			return &ValidationError{Name: "ufc_fighter_id", err: fmt.Errorf(`ent: validator failed for field "Fighter.ufc_fighter_id": %w`, err)}
		}
	}
	return nil
}

func (fuo *FighterUpdateOne) sqlSave(ctx context.Context) (_node *Fighter, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fighter.Table, fighter.Columns, sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fighter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fighter.FieldID)
		for _, f := range fields {
			if !fighter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fighter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fighter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UfcFighterID(); ok {
		_spec.SetField(fighter.FieldUfcFighterID, field.TypeString, value)
	}
	if value, ok := fuo.mutation.MmaID(); ok {
		_spec.SetField(fighter.FieldMmaID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedMmaID(); ok {
		_spec.AddField(fighter.FieldMmaID, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.FirstName(); ok {
		_spec.SetField(fighter.FieldFirstName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.LastName(); ok {
		_spec.SetField(fighter.FieldLastName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.NickName(); ok {
		_spec.SetField(fighter.FieldNickName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.FightinsiderID(); ok {
		_spec.SetField(fighter.FieldFightinsiderID, field.TypeString, value)
	}
	if fuo.mutation.FightinsiderIDCleared() {
		_spec.ClearField(fighter.FieldFightinsiderID, field.TypeString)
	}
	if value, ok := fuo.mutation.TapologyID(); ok {
		_spec.SetField(fighter.FieldTapologyID, field.TypeString, value)
	}
	if fuo.mutation.TapologyIDCleared() {
		_spec.ClearField(fighter.FieldTapologyID, field.TypeString)
	}
	if fuo.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   fighter.FightsTable,
			Columns: fighter.FightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		createE := &FighterResultsCreate{config: fuo.config, mutation: newFighterResultsMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFightsIDs(); len(nodes) > 0 && !fuo.mutation.FightsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   fighter.FightsTable,
			Columns: fighter.FightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fuo.config, mutation: newFighterResultsMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FightsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   fighter.FightsTable,
			Columns: fighter.FightsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &FighterResultsCreate{config: fuo.config, mutation: newFighterResultsMutation(fuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FighterAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fighter.FighterAliasesTable,
			Columns: []string{fighter.FighterAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFighterAliasesIDs(); len(nodes) > 0 && !fuo.mutation.FighterAliasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fighter.FighterAliasesTable,
			Columns: []string{fighter.FighterAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FighterAliasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fighter.FighterAliasesTable,
			Columns: []string{fighter.FighterAliasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fighter.FighterResultsTable,
			Columns: []string{fighter.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFighterResultsIDs(); len(nodes) > 0 && !fuo.mutation.FighterResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fighter.FighterResultsTable,
			Columns: []string{fighter.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FighterResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   fighter.FighterResultsTable,
			Columns: []string{fighter.FighterResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fighter{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fighter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
