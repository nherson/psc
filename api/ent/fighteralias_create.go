// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighteralias"
)

// FighterAliasCreate is the builder for creating a FighterAlias entity.
type FighterAliasCreate struct {
	config
	mutation *FighterAliasMutation
	hooks    []Hook
}

// SetAlias sets the "alias" field.
func (fac *FighterAliasCreate) SetAlias(s string) *FighterAliasCreate {
	fac.mutation.SetAlias(s)
	return fac
}

// SetFighterID sets the "fighter" edge to the Fighter entity by ID.
func (fac *FighterAliasCreate) SetFighterID(id int) *FighterAliasCreate {
	fac.mutation.SetFighterID(id)
	return fac
}

// SetNillableFighterID sets the "fighter" edge to the Fighter entity by ID if the given value is not nil.
func (fac *FighterAliasCreate) SetNillableFighterID(id *int) *FighterAliasCreate {
	if id != nil {
		fac = fac.SetFighterID(*id)
	}
	return fac
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (fac *FighterAliasCreate) SetFighter(f *Fighter) *FighterAliasCreate {
	return fac.SetFighterID(f.ID)
}

// Mutation returns the FighterAliasMutation object of the builder.
func (fac *FighterAliasCreate) Mutation() *FighterAliasMutation {
	return fac.mutation
}

// Save creates the FighterAlias in the database.
func (fac *FighterAliasCreate) Save(ctx context.Context) (*FighterAlias, error) {
	return withHooks[*FighterAlias, FighterAliasMutation](ctx, fac.sqlSave, fac.mutation, fac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fac *FighterAliasCreate) SaveX(ctx context.Context) *FighterAlias {
	v, err := fac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fac *FighterAliasCreate) Exec(ctx context.Context) error {
	_, err := fac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fac *FighterAliasCreate) ExecX(ctx context.Context) {
	if err := fac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fac *FighterAliasCreate) check() error {
	if _, ok := fac.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`ent: missing required field "FighterAlias.alias"`)}
	}
	if v, ok := fac.mutation.Alias(); ok {
		if err := fighteralias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "FighterAlias.alias": %w`, err)}
		}
	}
	return nil
}

func (fac *FighterAliasCreate) sqlSave(ctx context.Context) (*FighterAlias, error) {
	if err := fac.check(); err != nil {
		return nil, err
	}
	_node, _spec := fac.createSpec()
	if err := sqlgraph.CreateNode(ctx, fac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fac.mutation.id = &_node.ID
	fac.mutation.done = true
	return _node, nil
}

func (fac *FighterAliasCreate) createSpec() (*FighterAlias, *sqlgraph.CreateSpec) {
	var (
		_node = &FighterAlias{config: fac.config}
		_spec = sqlgraph.NewCreateSpec(fighteralias.Table, sqlgraph.NewFieldSpec(fighteralias.FieldID, field.TypeInt))
	)
	if value, ok := fac.mutation.Alias(); ok {
		_spec.SetField(fighteralias.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if nodes := fac.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fighteralias.FighterTable,
			Columns: []string{fighteralias.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fighter_fighter_aliases = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FighterAliasCreateBulk is the builder for creating many FighterAlias entities in bulk.
type FighterAliasCreateBulk struct {
	config
	builders []*FighterAliasCreate
}

// Save creates the FighterAlias entities in the database.
func (facb *FighterAliasCreateBulk) Save(ctx context.Context) ([]*FighterAlias, error) {
	specs := make([]*sqlgraph.CreateSpec, len(facb.builders))
	nodes := make([]*FighterAlias, len(facb.builders))
	mutators := make([]Mutator, len(facb.builders))
	for i := range facb.builders {
		func(i int, root context.Context) {
			builder := facb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FighterAliasMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, facb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, facb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, facb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (facb *FighterAliasCreateBulk) SaveX(ctx context.Context) []*FighterAlias {
	v, err := facb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (facb *FighterAliasCreateBulk) Exec(ctx context.Context) error {
	_, err := facb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (facb *FighterAliasCreateBulk) ExecX(ctx context.Context) {
	if err := facb.Exec(ctx); err != nil {
		panic(err)
	}
}
