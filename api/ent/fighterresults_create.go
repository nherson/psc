// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fight"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/fighterresults"
)

// FighterResultsCreate is the builder for creating a FighterResults entity.
type FighterResultsCreate struct {
	config
	mutation *FighterResultsMutation
	hooks    []Hook
}

// SetFighterID sets the "fighter_id" field.
func (frc *FighterResultsCreate) SetFighterID(i int) *FighterResultsCreate {
	frc.mutation.SetFighterID(i)
	return frc
}

// SetFightID sets the "fight_id" field.
func (frc *FighterResultsCreate) SetFightID(i int) *FighterResultsCreate {
	frc.mutation.SetFightID(i)
	return frc
}

// SetSignificantStrikesLanded sets the "significant_strikes_landed" field.
func (frc *FighterResultsCreate) SetSignificantStrikesLanded(i int) *FighterResultsCreate {
	frc.mutation.SetSignificantStrikesLanded(i)
	return frc
}

// SetTakedowns sets the "takedowns" field.
func (frc *FighterResultsCreate) SetTakedowns(i int) *FighterResultsCreate {
	frc.mutation.SetTakedowns(i)
	return frc
}

// SetKnockdowns sets the "knockdowns" field.
func (frc *FighterResultsCreate) SetKnockdowns(i int) *FighterResultsCreate {
	frc.mutation.SetKnockdowns(i)
	return frc
}

// SetControlTimeSeconds sets the "control_time_seconds" field.
func (frc *FighterResultsCreate) SetControlTimeSeconds(i int) *FighterResultsCreate {
	frc.mutation.SetControlTimeSeconds(i)
	return frc
}

// SetWinByStoppage sets the "win_by_stoppage" field.
func (frc *FighterResultsCreate) SetWinByStoppage(b bool) *FighterResultsCreate {
	frc.mutation.SetWinByStoppage(b)
	return frc
}

// SetLossByStoppage sets the "loss_by_stoppage" field.
func (frc *FighterResultsCreate) SetLossByStoppage(b bool) *FighterResultsCreate {
	frc.mutation.SetLossByStoppage(b)
	return frc
}

// SetMissedWeight sets the "missed_weight" field.
func (frc *FighterResultsCreate) SetMissedWeight(b bool) *FighterResultsCreate {
	frc.mutation.SetMissedWeight(b)
	return frc
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (frc *FighterResultsCreate) SetFighter(f *Fighter) *FighterResultsCreate {
	return frc.SetFighterID(f.ID)
}

// SetFight sets the "fight" edge to the Fight entity.
func (frc *FighterResultsCreate) SetFight(f *Fight) *FighterResultsCreate {
	return frc.SetFightID(f.ID)
}

// Mutation returns the FighterResultsMutation object of the builder.
func (frc *FighterResultsCreate) Mutation() *FighterResultsMutation {
	return frc.mutation
}

// Save creates the FighterResults in the database.
func (frc *FighterResultsCreate) Save(ctx context.Context) (*FighterResults, error) {
	return withHooks[*FighterResults, FighterResultsMutation](ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FighterResultsCreate) SaveX(ctx context.Context) *FighterResults {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FighterResultsCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FighterResultsCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FighterResultsCreate) check() error {
	if _, ok := frc.mutation.FighterID(); !ok {
		return &ValidationError{Name: "fighter_id", err: errors.New(`ent: missing required field "FighterResults.fighter_id"`)}
	}
	if _, ok := frc.mutation.FightID(); !ok {
		return &ValidationError{Name: "fight_id", err: errors.New(`ent: missing required field "FighterResults.fight_id"`)}
	}
	if _, ok := frc.mutation.SignificantStrikesLanded(); !ok {
		return &ValidationError{Name: "significant_strikes_landed", err: errors.New(`ent: missing required field "FighterResults.significant_strikes_landed"`)}
	}
	if _, ok := frc.mutation.Takedowns(); !ok {
		return &ValidationError{Name: "takedowns", err: errors.New(`ent: missing required field "FighterResults.takedowns"`)}
	}
	if _, ok := frc.mutation.Knockdowns(); !ok {
		return &ValidationError{Name: "knockdowns", err: errors.New(`ent: missing required field "FighterResults.knockdowns"`)}
	}
	if _, ok := frc.mutation.ControlTimeSeconds(); !ok {
		return &ValidationError{Name: "control_time_seconds", err: errors.New(`ent: missing required field "FighterResults.control_time_seconds"`)}
	}
	if _, ok := frc.mutation.WinByStoppage(); !ok {
		return &ValidationError{Name: "win_by_stoppage", err: errors.New(`ent: missing required field "FighterResults.win_by_stoppage"`)}
	}
	if _, ok := frc.mutation.LossByStoppage(); !ok {
		return &ValidationError{Name: "loss_by_stoppage", err: errors.New(`ent: missing required field "FighterResults.loss_by_stoppage"`)}
	}
	if _, ok := frc.mutation.MissedWeight(); !ok {
		return &ValidationError{Name: "missed_weight", err: errors.New(`ent: missing required field "FighterResults.missed_weight"`)}
	}
	if _, ok := frc.mutation.FighterID(); !ok {
		return &ValidationError{Name: "fighter", err: errors.New(`ent: missing required edge "FighterResults.fighter"`)}
	}
	if _, ok := frc.mutation.FightID(); !ok {
		return &ValidationError{Name: "fight", err: errors.New(`ent: missing required edge "FighterResults.fight"`)}
	}
	return nil
}

func (frc *FighterResultsCreate) sqlSave(ctx context.Context) (*FighterResults, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FighterResultsCreate) createSpec() (*FighterResults, *sqlgraph.CreateSpec) {
	var (
		_node = &FighterResults{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(fighterresults.Table, sqlgraph.NewFieldSpec(fighterresults.FieldID, field.TypeInt))
	)
	if value, ok := frc.mutation.SignificantStrikesLanded(); ok {
		_spec.SetField(fighterresults.FieldSignificantStrikesLanded, field.TypeInt, value)
		_node.SignificantStrikesLanded = value
	}
	if value, ok := frc.mutation.Takedowns(); ok {
		_spec.SetField(fighterresults.FieldTakedowns, field.TypeInt, value)
		_node.Takedowns = value
	}
	if value, ok := frc.mutation.Knockdowns(); ok {
		_spec.SetField(fighterresults.FieldKnockdowns, field.TypeInt, value)
		_node.Knockdowns = value
	}
	if value, ok := frc.mutation.ControlTimeSeconds(); ok {
		_spec.SetField(fighterresults.FieldControlTimeSeconds, field.TypeInt, value)
		_node.ControlTimeSeconds = value
	}
	if value, ok := frc.mutation.WinByStoppage(); ok {
		_spec.SetField(fighterresults.FieldWinByStoppage, field.TypeBool, value)
		_node.WinByStoppage = value
	}
	if value, ok := frc.mutation.LossByStoppage(); ok {
		_spec.SetField(fighterresults.FieldLossByStoppage, field.TypeBool, value)
		_node.LossByStoppage = value
	}
	if value, ok := frc.mutation.MissedWeight(); ok {
		_spec.SetField(fighterresults.FieldMissedWeight, field.TypeBool, value)
		_node.MissedWeight = value
	}
	if nodes := frc.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fighterresults.FighterTable,
			Columns: []string{fighterresults.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FighterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.FightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fighterresults.FightTable,
			Columns: []string{fighterresults.FightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FightID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FighterResultsCreateBulk is the builder for creating many FighterResults entities in bulk.
type FighterResultsCreateBulk struct {
	config
	builders []*FighterResultsCreate
}

// Save creates the FighterResults entities in the database.
func (frcb *FighterResultsCreateBulk) Save(ctx context.Context) ([]*FighterResults, error) {
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FighterResults, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FighterResultsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FighterResultsCreateBulk) SaveX(ctx context.Context) []*FighterResults {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FighterResultsCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FighterResultsCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}
