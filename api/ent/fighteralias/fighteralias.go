// Code generated by ent, DO NOT EDIT.

package fighteralias

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fighteralias type in the database.
	Label = "fighter_alias"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// EdgeFighter holds the string denoting the fighter edge name in mutations.
	EdgeFighter = "fighter"
	// Table holds the table name of the fighteralias in the database.
	Table = "fighter_alias"
	// FighterTable is the table that holds the fighter relation/edge.
	FighterTable = "fighter_alias"
	// FighterInverseTable is the table name for the Fighter entity.
	// It exists in this package in order to avoid circular dependency with the "fighter" package.
	FighterInverseTable = "fighters"
	// FighterColumn is the table column denoting the fighter relation/edge.
	FighterColumn = "fighter_fighter_aliases"
)

// Columns holds all SQL columns for fighteralias fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAlias,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "fighter_alias"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"fighter_fighter_aliases",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// AliasValidator is a validator for the "alias" field. It is called by the builders before save.
	AliasValidator func(string) error
)

// Order defines the ordering method for the FighterAlias queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByFighterField orders the results by fighter field.
func ByFighterField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFighterStep(), sql.OrderByField(field, opts...))
	}
}
func newFighterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FighterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FighterTable, FighterColumn),
	)
}
