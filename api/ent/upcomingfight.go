// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nherson/psc/api/ent/upcomingevent"
	"github.com/nherson/psc/api/ent/upcomingfight"
)

// UpcomingFight is the model entity for the UpcomingFight schema.
type UpcomingFight struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CardOrder holds the value of the "card_order" field.
	CardOrder int `json:"card_order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UpcomingFightQuery when eager-loading is set.
	Edges                          UpcomingFightEdges `json:"edges"`
	upcoming_event_upcoming_fights *int
	selectValues                   sql.SelectValues
}

// UpcomingFightEdges holds the relations/edges for other nodes in the graph.
type UpcomingFightEdges struct {
	// UpcomingEvent holds the value of the upcoming_event edge.
	UpcomingEvent *UpcomingEvent `json:"upcoming_event,omitempty"`
	// Fighters holds the value of the fighters edge.
	Fighters []*Fighter `json:"fighters,omitempty"`
	// UpcomingFighterOdds holds the value of the upcoming_fighter_odds edge.
	UpcomingFighterOdds []*UpcomingFighterOdds `json:"upcoming_fighter_odds,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UpcomingEventOrErr returns the UpcomingEvent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpcomingFightEdges) UpcomingEventOrErr() (*UpcomingEvent, error) {
	if e.loadedTypes[0] {
		if e.UpcomingEvent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: upcomingevent.Label}
		}
		return e.UpcomingEvent, nil
	}
	return nil, &NotLoadedError{edge: "upcoming_event"}
}

// FightersOrErr returns the Fighters value or an error if the edge
// was not loaded in eager-loading.
func (e UpcomingFightEdges) FightersOrErr() ([]*Fighter, error) {
	if e.loadedTypes[1] {
		return e.Fighters, nil
	}
	return nil, &NotLoadedError{edge: "fighters"}
}

// UpcomingFighterOddsOrErr returns the UpcomingFighterOdds value or an error if the edge
// was not loaded in eager-loading.
func (e UpcomingFightEdges) UpcomingFighterOddsOrErr() ([]*UpcomingFighterOdds, error) {
	if e.loadedTypes[2] {
		return e.UpcomingFighterOdds, nil
	}
	return nil, &NotLoadedError{edge: "upcoming_fighter_odds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpcomingFight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upcomingfight.FieldID, upcomingfight.FieldCardOrder:
			values[i] = new(sql.NullInt64)
		case upcomingfight.FieldCreatedAt, upcomingfight.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case upcomingfight.ForeignKeys[0]: // upcoming_event_upcoming_fights
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpcomingFight fields.
func (uf *UpcomingFight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upcomingfight.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uf.ID = int(value.Int64)
		case upcomingfight.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uf.CreatedAt = value.Time
			}
		case upcomingfight.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uf.UpdatedAt = value.Time
			}
		case upcomingfight.FieldCardOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field card_order", values[i])
			} else if value.Valid {
				uf.CardOrder = int(value.Int64)
			}
		case upcomingfight.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field upcoming_event_upcoming_fights", value)
			} else if value.Valid {
				uf.upcoming_event_upcoming_fights = new(int)
				*uf.upcoming_event_upcoming_fights = int(value.Int64)
			}
		default:
			uf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpcomingFight.
// This includes values selected through modifiers, order, etc.
func (uf *UpcomingFight) Value(name string) (ent.Value, error) {
	return uf.selectValues.Get(name)
}

// QueryUpcomingEvent queries the "upcoming_event" edge of the UpcomingFight entity.
func (uf *UpcomingFight) QueryUpcomingEvent() *UpcomingEventQuery {
	return NewUpcomingFightClient(uf.config).QueryUpcomingEvent(uf)
}

// QueryFighters queries the "fighters" edge of the UpcomingFight entity.
func (uf *UpcomingFight) QueryFighters() *FighterQuery {
	return NewUpcomingFightClient(uf.config).QueryFighters(uf)
}

// QueryUpcomingFighterOdds queries the "upcoming_fighter_odds" edge of the UpcomingFight entity.
func (uf *UpcomingFight) QueryUpcomingFighterOdds() *UpcomingFighterOddsQuery {
	return NewUpcomingFightClient(uf.config).QueryUpcomingFighterOdds(uf)
}

// Update returns a builder for updating this UpcomingFight.
// Note that you need to call UpcomingFight.Unwrap() before calling this method if this UpcomingFight
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UpcomingFight) Update() *UpcomingFightUpdateOne {
	return NewUpcomingFightClient(uf.config).UpdateOne(uf)
}

// Unwrap unwraps the UpcomingFight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UpcomingFight) Unwrap() *UpcomingFight {
	_tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpcomingFight is not a transactional entity")
	}
	uf.config.driver = _tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UpcomingFight) String() string {
	var builder strings.Builder
	builder.WriteString("UpcomingFight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("card_order=")
	builder.WriteString(fmt.Sprintf("%v", uf.CardOrder))
	builder.WriteByte(')')
	return builder.String()
}

// UpcomingFights is a parsable slice of UpcomingFight.
type UpcomingFights []*UpcomingFight
