// Code generated by ent, DO NOT EDIT.

package fighter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nherson/psc/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Fighter {
	return predicate.Fighter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Fighter {
	return predicate.Fighter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Fighter {
	return predicate.Fighter(sql.FieldLTE(FieldID, id))
}

// HasFights applies the HasEdge predicate on the "fights" edge.
func HasFights() predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FightsTable, FightsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFightsWith applies the HasEdge predicate on the "fights" edge with a given conditions (other predicates).
func HasFightsWith(preds ...predicate.Fight) predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		step := newFightsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFighterAliases applies the HasEdge predicate on the "fighter_aliases" edge.
func HasFighterAliases() predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FighterAliasesTable, FighterAliasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFighterAliasesWith applies the HasEdge predicate on the "fighter_aliases" edge with a given conditions (other predicates).
func HasFighterAliasesWith(preds ...predicate.FighterAlias) predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		step := newFighterAliasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFighterResults applies the HasEdge predicate on the "fighter_results" edge.
func HasFighterResults() predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, FighterResultsTable, FighterResultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFighterResultsWith applies the HasEdge predicate on the "fighter_results" edge with a given conditions (other predicates).
func HasFighterResultsWith(preds ...predicate.FighterResults) predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		step := newFighterResultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Fighter) predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Fighter) predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Fighter) predicate.Fighter {
	return predicate.Fighter(func(s *sql.Selector) {
		p(s.Not())
	})
}
