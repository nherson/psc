// Code generated by ent, DO NOT EDIT.

package fighter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fighter type in the database.
	Label = "fighter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeFights holds the string denoting the fights edge name in mutations.
	EdgeFights = "fights"
	// EdgeFighterAliases holds the string denoting the fighter_aliases edge name in mutations.
	EdgeFighterAliases = "fighter_aliases"
	// EdgeFighterResults holds the string denoting the fighter_results edge name in mutations.
	EdgeFighterResults = "fighter_results"
	// Table holds the table name of the fighter in the database.
	Table = "fighters"
	// FightsTable is the table that holds the fights relation/edge. The primary key declared below.
	FightsTable = "fighter_results"
	// FightsInverseTable is the table name for the Fight entity.
	// It exists in this package in order to avoid circular dependency with the "fight" package.
	FightsInverseTable = "fights"
	// FighterAliasesTable is the table that holds the fighter_aliases relation/edge.
	FighterAliasesTable = "fighter_alias"
	// FighterAliasesInverseTable is the table name for the FighterAlias entity.
	// It exists in this package in order to avoid circular dependency with the "fighteralias" package.
	FighterAliasesInverseTable = "fighter_alias"
	// FighterAliasesColumn is the table column denoting the fighter_aliases relation/edge.
	FighterAliasesColumn = "fighter_fighter_aliases"
	// FighterResultsTable is the table that holds the fighter_results relation/edge.
	FighterResultsTable = "fighter_results"
	// FighterResultsInverseTable is the table name for the FighterResults entity.
	// It exists in this package in order to avoid circular dependency with the "fighterresults" package.
	FighterResultsInverseTable = "fighter_results"
	// FighterResultsColumn is the table column denoting the fighter_results relation/edge.
	FighterResultsColumn = "fighter_id"
)

// Columns holds all SQL columns for fighter fields.
var Columns = []string{
	FieldID,
}

var (
	// FightsPrimaryKey and FightsColumn2 are the table columns denoting the
	// primary key for the fights relation (M2M).
	FightsPrimaryKey = []string{"fight_id", "fighter_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Order defines the ordering method for the Fighter queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFightsCount orders the results by fights count.
func ByFightsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFightsStep(), opts...)
	}
}

// ByFights orders the results by fights terms.
func ByFights(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFightsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFighterAliasesCount orders the results by fighter_aliases count.
func ByFighterAliasesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFighterAliasesStep(), opts...)
	}
}

// ByFighterAliases orders the results by fighter_aliases terms.
func ByFighterAliases(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFighterAliasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFighterResultsCount orders the results by fighter_results count.
func ByFighterResultsCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFighterResultsStep(), opts...)
	}
}

// ByFighterResults orders the results by fighter_results terms.
func ByFighterResults(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFighterResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFightsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FightsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FightsTable, FightsPrimaryKey...),
	)
}
func newFighterAliasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FighterAliasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FighterAliasesTable, FighterAliasesColumn),
	)
}
func newFighterResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FighterResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FighterResultsTable, FighterResultsColumn),
	)
}
