// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nherson/psc/api/ent/upcomingevent"
)

// UpcomingEvent is the model entity for the UpcomingEvent schema.
type UpcomingEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpcomingEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upcomingevent.FieldID:
			values[i] = new(sql.NullInt64)
		case upcomingevent.FieldCreatedAt, upcomingevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpcomingEvent fields.
func (ue *UpcomingEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upcomingevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ue.ID = int(value.Int64)
		case upcomingevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ue.CreatedAt = value.Time
			}
		case upcomingevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ue.UpdatedAt = value.Time
			}
		default:
			ue.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpcomingEvent.
// This includes values selected through modifiers, order, etc.
func (ue *UpcomingEvent) Value(name string) (ent.Value, error) {
	return ue.selectValues.Get(name)
}

// Update returns a builder for updating this UpcomingEvent.
// Note that you need to call UpcomingEvent.Unwrap() before calling this method if this UpcomingEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ue *UpcomingEvent) Update() *UpcomingEventUpdateOne {
	return NewUpcomingEventClient(ue.config).UpdateOne(ue)
}

// Unwrap unwraps the UpcomingEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ue *UpcomingEvent) Unwrap() *UpcomingEvent {
	_tx, ok := ue.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpcomingEvent is not a transactional entity")
	}
	ue.config.driver = _tx.drv
	return ue
}

// String implements the fmt.Stringer.
func (ue *UpcomingEvent) String() string {
	var builder strings.Builder
	builder.WriteString("UpcomingEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ue.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ue.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ue.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UpcomingEvents is a parsable slice of UpcomingEvent.
type UpcomingEvents []*UpcomingEvent
