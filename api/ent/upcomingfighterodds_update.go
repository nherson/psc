// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/predicate"
	"github.com/nherson/psc/api/ent/upcomingfight"
	"github.com/nherson/psc/api/ent/upcomingfighterodds"
)

// UpcomingFighterOddsUpdate is the builder for updating UpcomingFighterOdds entities.
type UpcomingFighterOddsUpdate struct {
	config
	hooks    []Hook
	mutation *UpcomingFighterOddsMutation
}

// Where appends a list predicates to the UpcomingFighterOddsUpdate builder.
func (ufou *UpcomingFighterOddsUpdate) Where(ps ...predicate.UpcomingFighterOdds) *UpcomingFighterOddsUpdate {
	ufou.mutation.Where(ps...)
	return ufou
}

// SetFighterID sets the "fighter_id" field.
func (ufou *UpcomingFighterOddsUpdate) SetFighterID(i int) *UpcomingFighterOddsUpdate {
	ufou.mutation.SetFighterID(i)
	return ufou
}

// SetUpcomingFightID sets the "upcoming_fight_id" field.
func (ufou *UpcomingFighterOddsUpdate) SetUpcomingFightID(i int) *UpcomingFighterOddsUpdate {
	ufou.mutation.SetUpcomingFightID(i)
	return ufou
}

// SetBestOdds sets the "best_odds" field.
func (ufou *UpcomingFighterOddsUpdate) SetBestOdds(i int) *UpcomingFighterOddsUpdate {
	ufou.mutation.ResetBestOdds()
	ufou.mutation.SetBestOdds(i)
	return ufou
}

// SetNillableBestOdds sets the "best_odds" field if the given value is not nil.
func (ufou *UpcomingFighterOddsUpdate) SetNillableBestOdds(i *int) *UpcomingFighterOddsUpdate {
	if i != nil {
		ufou.SetBestOdds(*i)
	}
	return ufou
}

// AddBestOdds adds i to the "best_odds" field.
func (ufou *UpcomingFighterOddsUpdate) AddBestOdds(i int) *UpcomingFighterOddsUpdate {
	ufou.mutation.AddBestOdds(i)
	return ufou
}

// ClearBestOdds clears the value of the "best_odds" field.
func (ufou *UpcomingFighterOddsUpdate) ClearBestOdds() *UpcomingFighterOddsUpdate {
	ufou.mutation.ClearBestOdds()
	return ufou
}

// SetCorner sets the "corner" field.
func (ufou *UpcomingFighterOddsUpdate) SetCorner(u upcomingfighterodds.Corner) *UpcomingFighterOddsUpdate {
	ufou.mutation.SetCorner(u)
	return ufou
}

// SetNillableCorner sets the "corner" field if the given value is not nil.
func (ufou *UpcomingFighterOddsUpdate) SetNillableCorner(u *upcomingfighterodds.Corner) *UpcomingFighterOddsUpdate {
	if u != nil {
		ufou.SetCorner(*u)
	}
	return ufou
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (ufou *UpcomingFighterOddsUpdate) SetFighter(f *Fighter) *UpcomingFighterOddsUpdate {
	return ufou.SetFighterID(f.ID)
}

// SetUpcomingFight sets the "upcoming_fight" edge to the UpcomingFight entity.
func (ufou *UpcomingFighterOddsUpdate) SetUpcomingFight(u *UpcomingFight) *UpcomingFighterOddsUpdate {
	return ufou.SetUpcomingFightID(u.ID)
}

// Mutation returns the UpcomingFighterOddsMutation object of the builder.
func (ufou *UpcomingFighterOddsUpdate) Mutation() *UpcomingFighterOddsMutation {
	return ufou.mutation
}

// ClearFighter clears the "fighter" edge to the Fighter entity.
func (ufou *UpcomingFighterOddsUpdate) ClearFighter() *UpcomingFighterOddsUpdate {
	ufou.mutation.ClearFighter()
	return ufou
}

// ClearUpcomingFight clears the "upcoming_fight" edge to the UpcomingFight entity.
func (ufou *UpcomingFighterOddsUpdate) ClearUpcomingFight() *UpcomingFighterOddsUpdate {
	ufou.mutation.ClearUpcomingFight()
	return ufou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufou *UpcomingFighterOddsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UpcomingFighterOddsMutation](ctx, ufou.sqlSave, ufou.mutation, ufou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufou *UpcomingFighterOddsUpdate) SaveX(ctx context.Context) int {
	affected, err := ufou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufou *UpcomingFighterOddsUpdate) Exec(ctx context.Context) error {
	_, err := ufou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufou *UpcomingFighterOddsUpdate) ExecX(ctx context.Context) {
	if err := ufou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufou *UpcomingFighterOddsUpdate) check() error {
	if v, ok := ufou.mutation.Corner(); ok {
		if err := upcomingfighterodds.CornerValidator(v); err != nil {
			return &ValidationError{Name: "corner", err: fmt.Errorf(`ent: validator failed for field "UpcomingFighterOdds.corner": %w`, err)}
		}
	}
	if _, ok := ufou.mutation.FighterID(); ufou.mutation.FighterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UpcomingFighterOdds.fighter"`)
	}
	if _, ok := ufou.mutation.UpcomingFightID(); ufou.mutation.UpcomingFightCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UpcomingFighterOdds.upcoming_fight"`)
	}
	return nil
}

func (ufou *UpcomingFighterOddsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ufou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(upcomingfighterodds.Table, upcomingfighterodds.Columns, sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt))
	if ps := ufou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufou.mutation.BestOdds(); ok {
		_spec.SetField(upcomingfighterodds.FieldBestOdds, field.TypeInt, value)
	}
	if value, ok := ufou.mutation.AddedBestOdds(); ok {
		_spec.AddField(upcomingfighterodds.FieldBestOdds, field.TypeInt, value)
	}
	if ufou.mutation.BestOddsCleared() {
		_spec.ClearField(upcomingfighterodds.FieldBestOdds, field.TypeInt)
	}
	if value, ok := ufou.mutation.Corner(); ok {
		_spec.SetField(upcomingfighterodds.FieldCorner, field.TypeEnum, value)
	}
	if ufou.mutation.FighterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.FighterTable,
			Columns: []string{upcomingfighterodds.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufou.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.FighterTable,
			Columns: []string{upcomingfighterodds.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufou.mutation.UpcomingFightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.UpcomingFightTable,
			Columns: []string{upcomingfighterodds.UpcomingFightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufou.mutation.UpcomingFightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.UpcomingFightTable,
			Columns: []string{upcomingfighterodds.UpcomingFightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upcomingfighterodds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufou.mutation.done = true
	return n, nil
}

// UpcomingFighterOddsUpdateOne is the builder for updating a single UpcomingFighterOdds entity.
type UpcomingFighterOddsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpcomingFighterOddsMutation
}

// SetFighterID sets the "fighter_id" field.
func (ufouo *UpcomingFighterOddsUpdateOne) SetFighterID(i int) *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.SetFighterID(i)
	return ufouo
}

// SetUpcomingFightID sets the "upcoming_fight_id" field.
func (ufouo *UpcomingFighterOddsUpdateOne) SetUpcomingFightID(i int) *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.SetUpcomingFightID(i)
	return ufouo
}

// SetBestOdds sets the "best_odds" field.
func (ufouo *UpcomingFighterOddsUpdateOne) SetBestOdds(i int) *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.ResetBestOdds()
	ufouo.mutation.SetBestOdds(i)
	return ufouo
}

// SetNillableBestOdds sets the "best_odds" field if the given value is not nil.
func (ufouo *UpcomingFighterOddsUpdateOne) SetNillableBestOdds(i *int) *UpcomingFighterOddsUpdateOne {
	if i != nil {
		ufouo.SetBestOdds(*i)
	}
	return ufouo
}

// AddBestOdds adds i to the "best_odds" field.
func (ufouo *UpcomingFighterOddsUpdateOne) AddBestOdds(i int) *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.AddBestOdds(i)
	return ufouo
}

// ClearBestOdds clears the value of the "best_odds" field.
func (ufouo *UpcomingFighterOddsUpdateOne) ClearBestOdds() *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.ClearBestOdds()
	return ufouo
}

// SetCorner sets the "corner" field.
func (ufouo *UpcomingFighterOddsUpdateOne) SetCorner(u upcomingfighterodds.Corner) *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.SetCorner(u)
	return ufouo
}

// SetNillableCorner sets the "corner" field if the given value is not nil.
func (ufouo *UpcomingFighterOddsUpdateOne) SetNillableCorner(u *upcomingfighterodds.Corner) *UpcomingFighterOddsUpdateOne {
	if u != nil {
		ufouo.SetCorner(*u)
	}
	return ufouo
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (ufouo *UpcomingFighterOddsUpdateOne) SetFighter(f *Fighter) *UpcomingFighterOddsUpdateOne {
	return ufouo.SetFighterID(f.ID)
}

// SetUpcomingFight sets the "upcoming_fight" edge to the UpcomingFight entity.
func (ufouo *UpcomingFighterOddsUpdateOne) SetUpcomingFight(u *UpcomingFight) *UpcomingFighterOddsUpdateOne {
	return ufouo.SetUpcomingFightID(u.ID)
}

// Mutation returns the UpcomingFighterOddsMutation object of the builder.
func (ufouo *UpcomingFighterOddsUpdateOne) Mutation() *UpcomingFighterOddsMutation {
	return ufouo.mutation
}

// ClearFighter clears the "fighter" edge to the Fighter entity.
func (ufouo *UpcomingFighterOddsUpdateOne) ClearFighter() *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.ClearFighter()
	return ufouo
}

// ClearUpcomingFight clears the "upcoming_fight" edge to the UpcomingFight entity.
func (ufouo *UpcomingFighterOddsUpdateOne) ClearUpcomingFight() *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.ClearUpcomingFight()
	return ufouo
}

// Where appends a list predicates to the UpcomingFighterOddsUpdate builder.
func (ufouo *UpcomingFighterOddsUpdateOne) Where(ps ...predicate.UpcomingFighterOdds) *UpcomingFighterOddsUpdateOne {
	ufouo.mutation.Where(ps...)
	return ufouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufouo *UpcomingFighterOddsUpdateOne) Select(field string, fields ...string) *UpcomingFighterOddsUpdateOne {
	ufouo.fields = append([]string{field}, fields...)
	return ufouo
}

// Save executes the query and returns the updated UpcomingFighterOdds entity.
func (ufouo *UpcomingFighterOddsUpdateOne) Save(ctx context.Context) (*UpcomingFighterOdds, error) {
	return withHooks[*UpcomingFighterOdds, UpcomingFighterOddsMutation](ctx, ufouo.sqlSave, ufouo.mutation, ufouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufouo *UpcomingFighterOddsUpdateOne) SaveX(ctx context.Context) *UpcomingFighterOdds {
	node, err := ufouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufouo *UpcomingFighterOddsUpdateOne) Exec(ctx context.Context) error {
	_, err := ufouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufouo *UpcomingFighterOddsUpdateOne) ExecX(ctx context.Context) {
	if err := ufouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufouo *UpcomingFighterOddsUpdateOne) check() error {
	if v, ok := ufouo.mutation.Corner(); ok {
		if err := upcomingfighterodds.CornerValidator(v); err != nil {
			return &ValidationError{Name: "corner", err: fmt.Errorf(`ent: validator failed for field "UpcomingFighterOdds.corner": %w`, err)}
		}
	}
	if _, ok := ufouo.mutation.FighterID(); ufouo.mutation.FighterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UpcomingFighterOdds.fighter"`)
	}
	if _, ok := ufouo.mutation.UpcomingFightID(); ufouo.mutation.UpcomingFightCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UpcomingFighterOdds.upcoming_fight"`)
	}
	return nil
}

func (ufouo *UpcomingFighterOddsUpdateOne) sqlSave(ctx context.Context) (_node *UpcomingFighterOdds, err error) {
	if err := ufouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(upcomingfighterodds.Table, upcomingfighterodds.Columns, sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt))
	id, ok := ufouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpcomingFighterOdds.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upcomingfighterodds.FieldID)
		for _, f := range fields {
			if !upcomingfighterodds.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upcomingfighterodds.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufouo.mutation.BestOdds(); ok {
		_spec.SetField(upcomingfighterodds.FieldBestOdds, field.TypeInt, value)
	}
	if value, ok := ufouo.mutation.AddedBestOdds(); ok {
		_spec.AddField(upcomingfighterodds.FieldBestOdds, field.TypeInt, value)
	}
	if ufouo.mutation.BestOddsCleared() {
		_spec.ClearField(upcomingfighterodds.FieldBestOdds, field.TypeInt)
	}
	if value, ok := ufouo.mutation.Corner(); ok {
		_spec.SetField(upcomingfighterodds.FieldCorner, field.TypeEnum, value)
	}
	if ufouo.mutation.FighterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.FighterTable,
			Columns: []string{upcomingfighterodds.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufouo.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.FighterTable,
			Columns: []string{upcomingfighterodds.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufouo.mutation.UpcomingFightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.UpcomingFightTable,
			Columns: []string{upcomingfighterodds.UpcomingFightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufouo.mutation.UpcomingFightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.UpcomingFightTable,
			Columns: []string{upcomingfighterodds.UpcomingFightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UpcomingFighterOdds{config: ufouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upcomingfighterodds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufouo.mutation.done = true
	return _node, nil
}
