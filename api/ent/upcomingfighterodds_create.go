// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nherson/psc/api/ent/fighter"
	"github.com/nherson/psc/api/ent/upcomingfight"
	"github.com/nherson/psc/api/ent/upcomingfighterodds"
)

// UpcomingFighterOddsCreate is the builder for creating a UpcomingFighterOdds entity.
type UpcomingFighterOddsCreate struct {
	config
	mutation *UpcomingFighterOddsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFighterID sets the "fighter_id" field.
func (ufoc *UpcomingFighterOddsCreate) SetFighterID(i int) *UpcomingFighterOddsCreate {
	ufoc.mutation.SetFighterID(i)
	return ufoc
}

// SetUpcomingFightID sets the "upcoming_fight_id" field.
func (ufoc *UpcomingFighterOddsCreate) SetUpcomingFightID(i int) *UpcomingFighterOddsCreate {
	ufoc.mutation.SetUpcomingFightID(i)
	return ufoc
}

// SetBestOdds sets the "best_odds" field.
func (ufoc *UpcomingFighterOddsCreate) SetBestOdds(i int) *UpcomingFighterOddsCreate {
	ufoc.mutation.SetBestOdds(i)
	return ufoc
}

// SetNillableBestOdds sets the "best_odds" field if the given value is not nil.
func (ufoc *UpcomingFighterOddsCreate) SetNillableBestOdds(i *int) *UpcomingFighterOddsCreate {
	if i != nil {
		ufoc.SetBestOdds(*i)
	}
	return ufoc
}

// SetCorner sets the "corner" field.
func (ufoc *UpcomingFighterOddsCreate) SetCorner(u upcomingfighterodds.Corner) *UpcomingFighterOddsCreate {
	ufoc.mutation.SetCorner(u)
	return ufoc
}

// SetNillableCorner sets the "corner" field if the given value is not nil.
func (ufoc *UpcomingFighterOddsCreate) SetNillableCorner(u *upcomingfighterodds.Corner) *UpcomingFighterOddsCreate {
	if u != nil {
		ufoc.SetCorner(*u)
	}
	return ufoc
}

// SetFighter sets the "fighter" edge to the Fighter entity.
func (ufoc *UpcomingFighterOddsCreate) SetFighter(f *Fighter) *UpcomingFighterOddsCreate {
	return ufoc.SetFighterID(f.ID)
}

// SetUpcomingFight sets the "upcoming_fight" edge to the UpcomingFight entity.
func (ufoc *UpcomingFighterOddsCreate) SetUpcomingFight(u *UpcomingFight) *UpcomingFighterOddsCreate {
	return ufoc.SetUpcomingFightID(u.ID)
}

// Mutation returns the UpcomingFighterOddsMutation object of the builder.
func (ufoc *UpcomingFighterOddsCreate) Mutation() *UpcomingFighterOddsMutation {
	return ufoc.mutation
}

// Save creates the UpcomingFighterOdds in the database.
func (ufoc *UpcomingFighterOddsCreate) Save(ctx context.Context) (*UpcomingFighterOdds, error) {
	ufoc.defaults()
	return withHooks[*UpcomingFighterOdds, UpcomingFighterOddsMutation](ctx, ufoc.sqlSave, ufoc.mutation, ufoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufoc *UpcomingFighterOddsCreate) SaveX(ctx context.Context) *UpcomingFighterOdds {
	v, err := ufoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufoc *UpcomingFighterOddsCreate) Exec(ctx context.Context) error {
	_, err := ufoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufoc *UpcomingFighterOddsCreate) ExecX(ctx context.Context) {
	if err := ufoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufoc *UpcomingFighterOddsCreate) defaults() {
	if _, ok := ufoc.mutation.Corner(); !ok {
		v := upcomingfighterodds.DefaultCorner
		ufoc.mutation.SetCorner(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufoc *UpcomingFighterOddsCreate) check() error {
	if _, ok := ufoc.mutation.FighterID(); !ok {
		return &ValidationError{Name: "fighter_id", err: errors.New(`ent: missing required field "UpcomingFighterOdds.fighter_id"`)}
	}
	if _, ok := ufoc.mutation.UpcomingFightID(); !ok {
		return &ValidationError{Name: "upcoming_fight_id", err: errors.New(`ent: missing required field "UpcomingFighterOdds.upcoming_fight_id"`)}
	}
	if _, ok := ufoc.mutation.Corner(); !ok {
		return &ValidationError{Name: "corner", err: errors.New(`ent: missing required field "UpcomingFighterOdds.corner"`)}
	}
	if v, ok := ufoc.mutation.Corner(); ok {
		if err := upcomingfighterodds.CornerValidator(v); err != nil {
			return &ValidationError{Name: "corner", err: fmt.Errorf(`ent: validator failed for field "UpcomingFighterOdds.corner": %w`, err)}
		}
	}
	if _, ok := ufoc.mutation.FighterID(); !ok {
		return &ValidationError{Name: "fighter", err: errors.New(`ent: missing required edge "UpcomingFighterOdds.fighter"`)}
	}
	if _, ok := ufoc.mutation.UpcomingFightID(); !ok {
		return &ValidationError{Name: "upcoming_fight", err: errors.New(`ent: missing required edge "UpcomingFighterOdds.upcoming_fight"`)}
	}
	return nil
}

func (ufoc *UpcomingFighterOddsCreate) sqlSave(ctx context.Context) (*UpcomingFighterOdds, error) {
	if err := ufoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ufoc.mutation.id = &_node.ID
	ufoc.mutation.done = true
	return _node, nil
}

func (ufoc *UpcomingFighterOddsCreate) createSpec() (*UpcomingFighterOdds, *sqlgraph.CreateSpec) {
	var (
		_node = &UpcomingFighterOdds{config: ufoc.config}
		_spec = sqlgraph.NewCreateSpec(upcomingfighterodds.Table, sqlgraph.NewFieldSpec(upcomingfighterodds.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ufoc.conflict
	if value, ok := ufoc.mutation.BestOdds(); ok {
		_spec.SetField(upcomingfighterodds.FieldBestOdds, field.TypeInt, value)
		_node.BestOdds = &value
	}
	if value, ok := ufoc.mutation.Corner(); ok {
		_spec.SetField(upcomingfighterodds.FieldCorner, field.TypeEnum, value)
		_node.Corner = value
	}
	if nodes := ufoc.mutation.FighterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.FighterTable,
			Columns: []string{upcomingfighterodds.FighterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fighter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FighterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufoc.mutation.UpcomingFightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   upcomingfighterodds.UpcomingFightTable,
			Columns: []string{upcomingfighterodds.UpcomingFightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upcomingfight.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpcomingFightID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpcomingFighterOdds.Create().
//		SetFighterID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpcomingFighterOddsUpsert) {
//			SetFighterID(v+v).
//		}).
//		Exec(ctx)
func (ufoc *UpcomingFighterOddsCreate) OnConflict(opts ...sql.ConflictOption) *UpcomingFighterOddsUpsertOne {
	ufoc.conflict = opts
	return &UpcomingFighterOddsUpsertOne{
		create: ufoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpcomingFighterOdds.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufoc *UpcomingFighterOddsCreate) OnConflictColumns(columns ...string) *UpcomingFighterOddsUpsertOne {
	ufoc.conflict = append(ufoc.conflict, sql.ConflictColumns(columns...))
	return &UpcomingFighterOddsUpsertOne{
		create: ufoc,
	}
}

type (
	// UpcomingFighterOddsUpsertOne is the builder for "upsert"-ing
	//  one UpcomingFighterOdds node.
	UpcomingFighterOddsUpsertOne struct {
		create *UpcomingFighterOddsCreate
	}

	// UpcomingFighterOddsUpsert is the "OnConflict" setter.
	UpcomingFighterOddsUpsert struct {
		*sql.UpdateSet
	}
)

// SetFighterID sets the "fighter_id" field.
func (u *UpcomingFighterOddsUpsert) SetFighterID(v int) *UpcomingFighterOddsUpsert {
	u.Set(upcomingfighterodds.FieldFighterID, v)
	return u
}

// UpdateFighterID sets the "fighter_id" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsert) UpdateFighterID() *UpcomingFighterOddsUpsert {
	u.SetExcluded(upcomingfighterodds.FieldFighterID)
	return u
}

// SetUpcomingFightID sets the "upcoming_fight_id" field.
func (u *UpcomingFighterOddsUpsert) SetUpcomingFightID(v int) *UpcomingFighterOddsUpsert {
	u.Set(upcomingfighterodds.FieldUpcomingFightID, v)
	return u
}

// UpdateUpcomingFightID sets the "upcoming_fight_id" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsert) UpdateUpcomingFightID() *UpcomingFighterOddsUpsert {
	u.SetExcluded(upcomingfighterodds.FieldUpcomingFightID)
	return u
}

// SetBestOdds sets the "best_odds" field.
func (u *UpcomingFighterOddsUpsert) SetBestOdds(v int) *UpcomingFighterOddsUpsert {
	u.Set(upcomingfighterodds.FieldBestOdds, v)
	return u
}

// UpdateBestOdds sets the "best_odds" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsert) UpdateBestOdds() *UpcomingFighterOddsUpsert {
	u.SetExcluded(upcomingfighterodds.FieldBestOdds)
	return u
}

// AddBestOdds adds v to the "best_odds" field.
func (u *UpcomingFighterOddsUpsert) AddBestOdds(v int) *UpcomingFighterOddsUpsert {
	u.Add(upcomingfighterodds.FieldBestOdds, v)
	return u
}

// ClearBestOdds clears the value of the "best_odds" field.
func (u *UpcomingFighterOddsUpsert) ClearBestOdds() *UpcomingFighterOddsUpsert {
	u.SetNull(upcomingfighterodds.FieldBestOdds)
	return u
}

// SetCorner sets the "corner" field.
func (u *UpcomingFighterOddsUpsert) SetCorner(v upcomingfighterodds.Corner) *UpcomingFighterOddsUpsert {
	u.Set(upcomingfighterodds.FieldCorner, v)
	return u
}

// UpdateCorner sets the "corner" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsert) UpdateCorner() *UpcomingFighterOddsUpsert {
	u.SetExcluded(upcomingfighterodds.FieldCorner)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UpcomingFighterOdds.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpcomingFighterOddsUpsertOne) UpdateNewValues() *UpcomingFighterOddsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpcomingFighterOdds.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpcomingFighterOddsUpsertOne) Ignore() *UpcomingFighterOddsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpcomingFighterOddsUpsertOne) DoNothing() *UpcomingFighterOddsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpcomingFighterOddsCreate.OnConflict
// documentation for more info.
func (u *UpcomingFighterOddsUpsertOne) Update(set func(*UpcomingFighterOddsUpsert)) *UpcomingFighterOddsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpcomingFighterOddsUpsert{UpdateSet: update})
	}))
	return u
}

// SetFighterID sets the "fighter_id" field.
func (u *UpcomingFighterOddsUpsertOne) SetFighterID(v int) *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetFighterID(v)
	})
}

// UpdateFighterID sets the "fighter_id" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertOne) UpdateFighterID() *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateFighterID()
	})
}

// SetUpcomingFightID sets the "upcoming_fight_id" field.
func (u *UpcomingFighterOddsUpsertOne) SetUpcomingFightID(v int) *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetUpcomingFightID(v)
	})
}

// UpdateUpcomingFightID sets the "upcoming_fight_id" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertOne) UpdateUpcomingFightID() *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateUpcomingFightID()
	})
}

// SetBestOdds sets the "best_odds" field.
func (u *UpcomingFighterOddsUpsertOne) SetBestOdds(v int) *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetBestOdds(v)
	})
}

// AddBestOdds adds v to the "best_odds" field.
func (u *UpcomingFighterOddsUpsertOne) AddBestOdds(v int) *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.AddBestOdds(v)
	})
}

// UpdateBestOdds sets the "best_odds" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertOne) UpdateBestOdds() *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateBestOdds()
	})
}

// ClearBestOdds clears the value of the "best_odds" field.
func (u *UpcomingFighterOddsUpsertOne) ClearBestOdds() *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.ClearBestOdds()
	})
}

// SetCorner sets the "corner" field.
func (u *UpcomingFighterOddsUpsertOne) SetCorner(v upcomingfighterodds.Corner) *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetCorner(v)
	})
}

// UpdateCorner sets the "corner" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertOne) UpdateCorner() *UpcomingFighterOddsUpsertOne {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateCorner()
	})
}

// Exec executes the query.
func (u *UpcomingFighterOddsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpcomingFighterOddsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpcomingFighterOddsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpcomingFighterOddsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpcomingFighterOddsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpcomingFighterOddsCreateBulk is the builder for creating many UpcomingFighterOdds entities in bulk.
type UpcomingFighterOddsCreateBulk struct {
	config
	builders []*UpcomingFighterOddsCreate
	conflict []sql.ConflictOption
}

// Save creates the UpcomingFighterOdds entities in the database.
func (ufocb *UpcomingFighterOddsCreateBulk) Save(ctx context.Context) ([]*UpcomingFighterOdds, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ufocb.builders))
	nodes := make([]*UpcomingFighterOdds, len(ufocb.builders))
	mutators := make([]Mutator, len(ufocb.builders))
	for i := range ufocb.builders {
		func(i int, root context.Context) {
			builder := ufocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpcomingFighterOddsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufocb *UpcomingFighterOddsCreateBulk) SaveX(ctx context.Context) []*UpcomingFighterOdds {
	v, err := ufocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufocb *UpcomingFighterOddsCreateBulk) Exec(ctx context.Context) error {
	_, err := ufocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufocb *UpcomingFighterOddsCreateBulk) ExecX(ctx context.Context) {
	if err := ufocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpcomingFighterOdds.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpcomingFighterOddsUpsert) {
//			SetFighterID(v+v).
//		}).
//		Exec(ctx)
func (ufocb *UpcomingFighterOddsCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpcomingFighterOddsUpsertBulk {
	ufocb.conflict = opts
	return &UpcomingFighterOddsUpsertBulk{
		create: ufocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpcomingFighterOdds.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufocb *UpcomingFighterOddsCreateBulk) OnConflictColumns(columns ...string) *UpcomingFighterOddsUpsertBulk {
	ufocb.conflict = append(ufocb.conflict, sql.ConflictColumns(columns...))
	return &UpcomingFighterOddsUpsertBulk{
		create: ufocb,
	}
}

// UpcomingFighterOddsUpsertBulk is the builder for "upsert"-ing
// a bulk of UpcomingFighterOdds nodes.
type UpcomingFighterOddsUpsertBulk struct {
	create *UpcomingFighterOddsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UpcomingFighterOdds.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UpcomingFighterOddsUpsertBulk) UpdateNewValues() *UpcomingFighterOddsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpcomingFighterOdds.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpcomingFighterOddsUpsertBulk) Ignore() *UpcomingFighterOddsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpcomingFighterOddsUpsertBulk) DoNothing() *UpcomingFighterOddsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpcomingFighterOddsCreateBulk.OnConflict
// documentation for more info.
func (u *UpcomingFighterOddsUpsertBulk) Update(set func(*UpcomingFighterOddsUpsert)) *UpcomingFighterOddsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpcomingFighterOddsUpsert{UpdateSet: update})
	}))
	return u
}

// SetFighterID sets the "fighter_id" field.
func (u *UpcomingFighterOddsUpsertBulk) SetFighterID(v int) *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetFighterID(v)
	})
}

// UpdateFighterID sets the "fighter_id" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertBulk) UpdateFighterID() *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateFighterID()
	})
}

// SetUpcomingFightID sets the "upcoming_fight_id" field.
func (u *UpcomingFighterOddsUpsertBulk) SetUpcomingFightID(v int) *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetUpcomingFightID(v)
	})
}

// UpdateUpcomingFightID sets the "upcoming_fight_id" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertBulk) UpdateUpcomingFightID() *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateUpcomingFightID()
	})
}

// SetBestOdds sets the "best_odds" field.
func (u *UpcomingFighterOddsUpsertBulk) SetBestOdds(v int) *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetBestOdds(v)
	})
}

// AddBestOdds adds v to the "best_odds" field.
func (u *UpcomingFighterOddsUpsertBulk) AddBestOdds(v int) *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.AddBestOdds(v)
	})
}

// UpdateBestOdds sets the "best_odds" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertBulk) UpdateBestOdds() *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateBestOdds()
	})
}

// ClearBestOdds clears the value of the "best_odds" field.
func (u *UpcomingFighterOddsUpsertBulk) ClearBestOdds() *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.ClearBestOdds()
	})
}

// SetCorner sets the "corner" field.
func (u *UpcomingFighterOddsUpsertBulk) SetCorner(v upcomingfighterodds.Corner) *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.SetCorner(v)
	})
}

// UpdateCorner sets the "corner" field to the value that was provided on create.
func (u *UpcomingFighterOddsUpsertBulk) UpdateCorner() *UpcomingFighterOddsUpsertBulk {
	return u.Update(func(s *UpcomingFighterOddsUpsert) {
		s.UpdateCorner()
	})
}

// Exec executes the query.
func (u *UpcomingFighterOddsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpcomingFighterOddsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpcomingFighterOddsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpcomingFighterOddsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
