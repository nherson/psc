// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/proto/api/v1/psc.proto

package apiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/nherson/psc/api/proto/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PSCServiceName is the fully-qualified name of the PSCService service.
	PSCServiceName = "api.v1.PSCService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PSCServiceListEventsProcedure is the fully-qualified name of the PSCService's ListEvents RPC.
	PSCServiceListEventsProcedure = "/api.v1.PSCService/ListEvents"
	// PSCServiceListResultsForEventProcedure is the fully-qualified name of the PSCService's
	// ListResultsForEvent RPC.
	PSCServiceListResultsForEventProcedure = "/api.v1.PSCService/ListResultsForEvent"
	// PSCServiceListFightersProcedure is the fully-qualified name of the PSCService's ListFighters RPC.
	PSCServiceListFightersProcedure = "/api.v1.PSCService/ListFighters"
	// PSCServiceListResultsForFighterProcedure is the fully-qualified name of the PSCService's
	// ListResultsForFighter RPC.
	PSCServiceListResultsForFighterProcedure = "/api.v1.PSCService/ListResultsForFighter"
)

// PSCServiceClient is a client for the api.v1.PSCService service.
type PSCServiceClient interface {
	ListEvents(context.Context, *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error)
	ListResultsForEvent(context.Context, *connect_go.Request[v1.ListResultsForEventRequest]) (*connect_go.Response[v1.ListResultsForEventResponse], error)
	ListFighters(context.Context, *connect_go.Request[v1.ListFightersRequest]) (*connect_go.Response[v1.ListFightersResponse], error)
	ListResultsForFighter(context.Context, *connect_go.Request[v1.ListResultsForFighterRequest]) (*connect_go.Response[v1.ListResultsForFighterResponse], error)
}

// NewPSCServiceClient constructs a client for the api.v1.PSCService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPSCServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PSCServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pSCServiceClient{
		listEvents: connect_go.NewClient[v1.ListEventsRequest, v1.ListEventsResponse](
			httpClient,
			baseURL+PSCServiceListEventsProcedure,
			opts...,
		),
		listResultsForEvent: connect_go.NewClient[v1.ListResultsForEventRequest, v1.ListResultsForEventResponse](
			httpClient,
			baseURL+PSCServiceListResultsForEventProcedure,
			opts...,
		),
		listFighters: connect_go.NewClient[v1.ListFightersRequest, v1.ListFightersResponse](
			httpClient,
			baseURL+PSCServiceListFightersProcedure,
			opts...,
		),
		listResultsForFighter: connect_go.NewClient[v1.ListResultsForFighterRequest, v1.ListResultsForFighterResponse](
			httpClient,
			baseURL+PSCServiceListResultsForFighterProcedure,
			opts...,
		),
	}
}

// pSCServiceClient implements PSCServiceClient.
type pSCServiceClient struct {
	listEvents            *connect_go.Client[v1.ListEventsRequest, v1.ListEventsResponse]
	listResultsForEvent   *connect_go.Client[v1.ListResultsForEventRequest, v1.ListResultsForEventResponse]
	listFighters          *connect_go.Client[v1.ListFightersRequest, v1.ListFightersResponse]
	listResultsForFighter *connect_go.Client[v1.ListResultsForFighterRequest, v1.ListResultsForFighterResponse]
}

// ListEvents calls api.v1.PSCService.ListEvents.
func (c *pSCServiceClient) ListEvents(ctx context.Context, req *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// ListResultsForEvent calls api.v1.PSCService.ListResultsForEvent.
func (c *pSCServiceClient) ListResultsForEvent(ctx context.Context, req *connect_go.Request[v1.ListResultsForEventRequest]) (*connect_go.Response[v1.ListResultsForEventResponse], error) {
	return c.listResultsForEvent.CallUnary(ctx, req)
}

// ListFighters calls api.v1.PSCService.ListFighters.
func (c *pSCServiceClient) ListFighters(ctx context.Context, req *connect_go.Request[v1.ListFightersRequest]) (*connect_go.Response[v1.ListFightersResponse], error) {
	return c.listFighters.CallUnary(ctx, req)
}

// ListResultsForFighter calls api.v1.PSCService.ListResultsForFighter.
func (c *pSCServiceClient) ListResultsForFighter(ctx context.Context, req *connect_go.Request[v1.ListResultsForFighterRequest]) (*connect_go.Response[v1.ListResultsForFighterResponse], error) {
	return c.listResultsForFighter.CallUnary(ctx, req)
}

// PSCServiceHandler is an implementation of the api.v1.PSCService service.
type PSCServiceHandler interface {
	ListEvents(context.Context, *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error)
	ListResultsForEvent(context.Context, *connect_go.Request[v1.ListResultsForEventRequest]) (*connect_go.Response[v1.ListResultsForEventResponse], error)
	ListFighters(context.Context, *connect_go.Request[v1.ListFightersRequest]) (*connect_go.Response[v1.ListFightersResponse], error)
	ListResultsForFighter(context.Context, *connect_go.Request[v1.ListResultsForFighterRequest]) (*connect_go.Response[v1.ListResultsForFighterResponse], error)
}

// NewPSCServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPSCServiceHandler(svc PSCServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(PSCServiceListEventsProcedure, connect_go.NewUnaryHandler(
		PSCServiceListEventsProcedure,
		svc.ListEvents,
		opts...,
	))
	mux.Handle(PSCServiceListResultsForEventProcedure, connect_go.NewUnaryHandler(
		PSCServiceListResultsForEventProcedure,
		svc.ListResultsForEvent,
		opts...,
	))
	mux.Handle(PSCServiceListFightersProcedure, connect_go.NewUnaryHandler(
		PSCServiceListFightersProcedure,
		svc.ListFighters,
		opts...,
	))
	mux.Handle(PSCServiceListResultsForFighterProcedure, connect_go.NewUnaryHandler(
		PSCServiceListResultsForFighterProcedure,
		svc.ListResultsForFighter,
		opts...,
	))
	return "/api.v1.PSCService/", mux
}

// UnimplementedPSCServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPSCServiceHandler struct{}

func (UnimplementedPSCServiceHandler) ListEvents(context.Context, *connect_go.Request[v1.ListEventsRequest]) (*connect_go.Response[v1.ListEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PSCService.ListEvents is not implemented"))
}

func (UnimplementedPSCServiceHandler) ListResultsForEvent(context.Context, *connect_go.Request[v1.ListResultsForEventRequest]) (*connect_go.Response[v1.ListResultsForEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PSCService.ListResultsForEvent is not implemented"))
}

func (UnimplementedPSCServiceHandler) ListFighters(context.Context, *connect_go.Request[v1.ListFightersRequest]) (*connect_go.Response[v1.ListFightersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PSCService.ListFighters is not implemented"))
}

func (UnimplementedPSCServiceHandler) ListResultsForFighter(context.Context, *connect_go.Request[v1.ListResultsForFighterRequest]) (*connect_go.Response[v1.ListResultsForFighterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.v1.PSCService.ListResultsForFighter is not implemented"))
}
