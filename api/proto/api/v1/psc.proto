syntax = "proto3";

package api.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/nherson/psc/proto/api/v1;apiv1";

service PSCService {

  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
  rpc ListResultsForEvent(ListResultsForEventRequest) returns (ListResultsForEventResponse) {}
  rpc ListResultsForFighter(ListResultsForFighterRequest) returns (ListResultsForFighterResponse) {}
}

message ListEventsRequest {}

message ListEventsResponse {
  repeated Event events = 1;
}

message ListResultsForEventRequest {
  int32 event_id = 1;
}

message ListResultsForEventResponse {
  Event event = 1;
  repeated FightResult fight_results = 2;
}

message ListResultsForFighterRequest {
  int32 fighter_id = 1;
}

message ListResultsForFighterResponse {
  repeated FightResult fight_results = 1;
}

message FightResult {
  repeated FighterResult fighter_results = 1;
  Event event = 2;
  int32 result_ending_round = 3;
  int32 result_ending_time_seconds = 4;
}

message FighterResult {
  Fighter fighter = 1;
  int32 significant_strikes = 2;
  int32 takedowns = 3;
  int32 knockdowns = 4;
  int32 control_time_seconds = 5;
  float score = 6;
  // True if the fighter won the fight
  bool win = 7;
  // True if the fighter won the fight via stoppage
  bool win_by_stoppage = 8;
  // If the fighter won, this will be a string representing the method
  // of victory, e.g. "Decision - Unanimous" or "Submission" or "TKO/KO".bool
  // If the fighter did not win, will be an empty string
  string win_method = 9;
  // The corner the fighter was in, should be either 'red' or 'blue'
  string corner = 10;
}

message Fighter {
  string first_name = 1;
  string last_name = 2;
  string nick_name = 3;
}

message Event {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp date = 3;
}